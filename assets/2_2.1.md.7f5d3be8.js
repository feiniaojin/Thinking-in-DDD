import{_ as s,c as a,o as n,a as l}from"./app.1400b7bb.js";const F=JSON.parse('{"title":"2.1 现有应用架构存在的问题","description":"","frontmatter":{},"headers":[{"level":2,"title":"2.1.1 分层架构","slug":"_2-1-1-分层架构","link":"#_2-1-1-分层架构","children":[]},{"level":2,"title":"2.1.2 分层架构优点","slug":"_2-1-2-分层架构优点","link":"#_2-1-2-分层架构优点","children":[]},{"level":2,"title":"2.1.3 现有应用架构存在的问题","slug":"_2-1-3-现有应用架构存在的问题","link":"#_2-1-3-现有应用架构存在的问题","children":[]}],"relativePath":"2/2.1.md"}'),p={name:"2/2.1.md"},o=l(`<h1 id="_2-1-现有应用架构存在的问题" tabindex="-1">2.1 现有应用架构存在的问题 <a class="header-anchor" href="#_2-1-现有应用架构存在的问题" aria-hidden="true">#</a></h1><h2 id="_2-1-1-分层架构" tabindex="-1">2.1.1 分层架构 <a class="header-anchor" href="#_2-1-1-分层架构" aria-hidden="true">#</a></h2><p>目前许多项目使用的架构基本都是分层架构。特别地，在Java服务端开发中，习惯性得将应用分为三层：Controller层、Service层、Dao层。</p><p>Controller层:</p><p>Service层：</p><p>Dao:</p><p>其中Controller层依赖Service层，Service层依赖Dao层。</p><h2 id="_2-1-2-分层架构优点" tabindex="-1">2.1.2 分层架构优点 <a class="header-anchor" href="#_2-1-2-分层架构优点" aria-hidden="true">#</a></h2><p>分层架构具有许多优点：</p><ul><li>关注点分离</li></ul><p>分层架构每一层职责明确，能很好地实践单一职责的原则，每一层只关注自己的职责即可。</p><ul><li>低耦合</li></ul><p>上层依赖下层，单方向的依赖，不会产生循环以来。</p><ul><li>复用性强</li></ul><p>下层可以被多个上层依赖，即在多个上层中复用。</p><h2 id="_2-1-3-现有应用架构存在的问题" tabindex="-1">2.1.3 现有应用架构存在的问题 <a class="header-anchor" href="#_2-1-3-现有应用架构存在的问题" aria-hidden="true">#</a></h2><p>分层架构具备如此多的优点，所以在开发中被广泛使用。但是，如果我们开发过程中缺乏思考，也会引起一些问题。</p><ul><li>底层缺乏抽象</li></ul><p>我们经常能看到这样的情况：每一层的方法名字都是一样的，并没有体现出越上层越具体，越底层越抽象的设计思路。</p><p>Controller层：</p><div class="language-java"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">class</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Controller</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">void</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">updateTitleById</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">Param</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">param</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">        service</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">updateTitleById</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">param</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><p>Service层：</p><div class="language-java"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">class</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Service</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">void</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">updateTitleById</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">Param</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">param</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">        dao</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">updateTitleById</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">param</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><p>Dao层：</p><div class="language-java"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">class</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Dao</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">void</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">updateTitleById</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">Param</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">param</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">        </span><span style="color:#676E95;font-style:italic;">//TODO update db</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><p>上面的Controller、Service、Dao各层的updateTitleById方法中，分别根据根据自己所处的分层，进行了对应的处理。但是，如果Controller每增加一个业务方法，那么Service和Dao都会增加一个对应的方法，也就意味着底层的方法缺乏抽象。</p><p>解决的办法也很简单，Service是具体业务操作的实现，所以在新增业务操作时，增加新的业务方法无可厚非，但是Dao层可以抽象出更通用的方法。</p><ul><li>Service方法膨胀</li></ul><p>Service方法的初衷是为了实现业务逻辑，然而在实际中还会引入缓存、远程调用、消息发布等操作，这些代码与业务代码交织在一起，尤其是贫血模型时还会存在一堆的set方法，造成了Service方法膨胀，难以阅读、测试和维护。</p><div class="language-java"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">class</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Service</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">void</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">doBizLogic</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">DTO</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">dto</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">        </span><span style="color:#676E95;font-style:italic;">//参数校验</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#82AAFF;">checkParam</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">dto</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#89DDFF;">        </span><span style="color:#676E95;font-style:italic;">//RPC调用，查询一些数据</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#C792EA;">SomeData</span><span style="color:#A6ACCD;"> someData </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> rpc</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">querySomeData</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">dto</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">getId</span><span style="color:#89DDFF;">());</span></span>
<span class="line"><span style="color:#89DDFF;">        </span><span style="color:#676E95;font-style:italic;">//TODO 核心业务逻辑</span></span>
<span class="line"><span style="color:#89DDFF;">        </span><span style="color:#676E95;font-style:italic;">//数据库操作</span></span>
<span class="line"><span style="color:#A6ACCD;">        dao</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">updateTitleById</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">UpdateParam</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#89DDFF;">        </span><span style="color:#676E95;font-style:italic;">//中间件，删除缓存</span></span>
<span class="line"><span style="color:#A6ACCD;">        cache</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">del</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">key</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#89DDFF;">        </span><span style="color:#676E95;font-style:italic;">//中间件，发布消息</span></span>
<span class="line"><span style="color:#A6ACCD;">        mqProducer</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">send</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">msg</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><p>Service方法是执行业务逻辑的核心方法，所以必须对其进行有效的单元测试。在实际测试上面这样的Service方法时，操作起来会非常麻烦：要么测试时把所有的中间件调用操作都 mock掉，要么提供全套的中间件的测试环境，不管是哪一种，都给TDD的实践带来障碍。</p>`,31),e=[o];function c(t,r,y,D,i,A){return n(),a("div",null,e)}const d=s(p,[["render",c]]);export{F as __pageData,d as default};
