import{_ as s,c as a,o as n,a as p}from"./app.9803107f.js";const F=JSON.parse('{"title":"User Interface 层的实现细节","description":"","frontmatter":{},"headers":[],"relativePath":"2/UserInterfaceLayer.md"}'),l={name:"2/UserInterfaceLayer.md"},o=p(`<h1 id="user-interface-层的实现细节" tabindex="-1">User Interface 层的实现细节 <a class="header-anchor" href="#user-interface-层的实现细节" aria-hidden="true">#</a></h1><p>User Interface 层通过某种协议将应用层的用例暴露给用户。这里的用户，可能是自然人，也可能是其他外部系统。</p><p>用户接口层的入参出参，有可能复用 Application 层的入参出参（Command、Query、View），也有可能将需要将 Application 层的入参出参做转换。</p><p>一般通过 HTTP/REST 对外提供的接口，直接复用 Application 层的入参出参即可，因为最终都会转成 JSON 字符串，JSON 字符串不要求具体的类型信息。</p><p>而通过 RPC 对外提供的服务的接口，consumer 方往往要求 provider 方提供入参出参类型信息，为了不暴露 Application 层的编码细节，这就需要抽象一个公共的 jar 包，jar 包内提供独立接口和 DTO。</p><p>示例：</p><p>假设有一个需求需要我们提供一个 RPC 接口，用于验证当天是否是用户生日。</p><p>首先，定义了一个 jar 包，假设是以下的包：</p><div class="language-xml"><button title="Copy Code" class="copy"></button><span class="lang">xml</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">dependency</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">groupId</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;">com.feiniaojin.ddd</span><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">groupId</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">artifactId</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;">user-api</span><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">artifactId</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">version</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;">1.0.0</span><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">version</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">dependency</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"></span></code></pre></div><p>由于我们不能直接暴露 Application 层的类型，所以我们在这个包里定义了入参出参的 DTO 和接口，如下：</p><div class="language-java"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">//请求对象</span></span>
<span class="line"><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">class</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">BirthdayQueryRequest</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">implements</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Serializable</span><span style="color:#89DDFF;">{</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">private</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">String</span><span style="color:#A6ACCD;"> uid</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">//get&amp;set</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">//响应对象</span></span>
<span class="line"><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">class</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">BirthdayViewResponse</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">implements</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Serializable</span><span style="color:#89DDFF;">{</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">private</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">Boolean</span><span style="color:#A6ACCD;"> todayIsBirthday</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">//get&amp;set</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">//定义的接口</span></span>
<span class="line"><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">interface</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">UserBirthdayQueryApi</span><span style="color:#89DDFF;">{</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">Response</span><span style="color:#89DDFF;">&lt;</span><span style="color:#C792EA;">BirthdayViewResponse</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">checkUserBirthday</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">BirthdayQueryRequest</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">req</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><p>我们在用户接口层引入这个 Jar 包，并实现这个接口，在此省略日志、异常处理和监控等逻辑。</p><div class="language-java"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">class</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">UserBirthdayQueryApiImpl</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">implements</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">UserBirthdayQueryApi</span><span style="color:#89DDFF;">{</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">private</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">ApplicationService</span><span style="color:#A6ACCD;"> applicationService</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">Response</span><span style="color:#89DDFF;">&lt;</span><span style="color:#C792EA;">BirthdayViewResponse</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">checkUserBirthday</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">BirthdayQueryRequest</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">req</span><span style="color:#89DDFF;">){</span></span>
<span class="line"><span style="color:#89DDFF;">        </span><span style="color:#676E95;font-style:italic;">//转成应用层的Query对象</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#C792EA;">BirthdayQuery</span><span style="color:#A6ACCD;"> query</span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;">propertyMapper</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">mapping</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">req</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#89DDFF;">        </span><span style="color:#676E95;font-style:italic;">//执行查询，获得View对象</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#C792EA;">BirthdayView</span><span style="color:#A6ACCD;"> view</span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;">applicationService</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">checkUserBirthday</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">query</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#89DDFF;">        </span><span style="color:#676E95;font-style:italic;">//转成接口响应类型</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#C792EA;">BirthdayViewResponse</span><span style="color:#A6ACCD;"> bvr</span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;">propertyMapper</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">mapping</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">view</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#89DDFF;">        </span><span style="color:#676E95;font-style:italic;">//封装返回结果</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#A6ACCD;"> Response</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">success</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">bvr</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><p>有时候接口的调用会涉及到鉴权，也建议将鉴权逻辑实现在用户接口层。</p><p>原因是对于 Application 层的同一个方法，可能在 Interfaces-Web 和 Interfaces-Provider 等多个模块都有调用，鉴权是跟调用场景密切相关的，一般只对外部调用做鉴权，鉴权逻辑放置在 Application 层会对所有的调用来源进行鉴权。</p>`,15),e=[o];function t(c,r,y,i,D,A){return n(),a("div",null,e)}const d=s(l,[["render",t]]);export{F as __pageData,d as default};
