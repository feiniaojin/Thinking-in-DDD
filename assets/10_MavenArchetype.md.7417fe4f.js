import{_ as e}from"./chunks/ct.005.ebe877e9.js";import{_ as a,c as t,o as c,a as p}from"./app.0703c3d1.js";const r="/images/10/10.01.png",l="/images/10/10.03.png",s="/images/10/10.02.png",n="/images/10/10.04.png",d="/images/10/10.05.png",i="/images/10/10.06.png",o="/images/10/10.07.png",h="/images/10/10.08.png",_="/images/10/10.11.png",g="/images/10/10.12.png",j=JSON.parse('{"title":"Maven Archetype","description":"","frontmatter":{},"headers":[{"level":2,"title":"1. Maven Archetype介绍","slug":"_1-maven-archetype介绍","link":"#_1-maven-archetype介绍","children":[]},{"level":2,"title":"2. ddd-archetype的使用","slug":"_2-ddd-archetype的使用","link":"#_2-ddd-archetype的使用","children":[{"level":3,"title":"2.1 项目介绍","slug":"_2-1-项目介绍","link":"#_2-1-项目介绍","children":[]},{"level":3,"title":"2.2 安装过程","slug":"_2-2-安装过程","link":"#_2-2-安装过程","children":[]},{"level":3,"title":"2.2.1 克隆项目","slug":"_2-2-1-克隆项目","link":"#_2-2-1-克隆项目","children":[]},{"level":3,"title":"2.2.2 archetype:create-from-project","slug":"_2-2-2-archetype-create-from-project","link":"#_2-2-2-archetype-create-from-project","children":[]},{"level":3,"title":"2.2.3 install","slug":"_2-2-3-install","link":"#_2-2-3-install","children":[]},{"level":3,"title":"2.2.4 archetype:crawl","slug":"_2-2-4-archetype-crawl","link":"#_2-2-4-archetype-crawl","children":[]},{"level":3,"title":"2.3 使用ddd-archetype初始化项目","slug":"_2-3-使用ddd-archetype初始化项目","link":"#_2-3-使用ddd-archetype初始化项目","children":[]}]}],"relativePath":"10/MavenArchetype.md"}'),y={name:"10/MavenArchetype.md"},m=p('<h1 id="maven-archetype" tabindex="-1">Maven Archetype <a class="header-anchor" href="#maven-archetype" aria-hidden="true">#</a></h1><h2 id="_1-maven-archetype介绍" tabindex="-1">1. Maven Archetype介绍 <a class="header-anchor" href="#_1-maven-archetype介绍" aria-hidden="true">#</a></h2><p>Maven Archetype是一个Maven插件，它允许开发人员通过指定一组参数来创建项目的基础结构。它可以帮助开发人员快速创建项目的基础结构，大大减少开发人员在创建项目时所需的时间和精力，并且可以确保项目结构的一致性和可重用性，从而提高代码质量和可维护性。</p><p>我们在介绍DDD应用架构时，对项目的结构进行了介绍。我们将项目分为多个Maven Module，如果每个项目都手工创建一次，是比较繁琐的工作，也不利项目结构的统一。</p><p><img src="'+e+`" alt="DDD完整包结构"></p><p>我们使用Maven Archetype创建DDD项目初始化的脚手架。</p><h2 id="_2-ddd-archetype的使用" tabindex="-1">2. ddd-archetype的使用 <a class="header-anchor" href="#_2-ddd-archetype的使用" aria-hidden="true">#</a></h2><h3 id="_2-1-项目介绍" tabindex="-1">2.1 项目介绍 <a class="header-anchor" href="#_2-1-项目介绍" aria-hidden="true">#</a></h3><p>ddd-archetype是一个Maven Archetype的原型工程，我们将其克隆到本地之后，可以安装为Maven Archetype，并且支持用户自己任意增加或者删减Maven Module。</p><p>项目链接：<a href="https://github.com/feiniaojin/ddd-archetype" target="_blank" rel="noreferrer">https://github.com/feiniaojin/ddd-archetype</a></p><p>欢迎star！</p><h3 id="_2-2-安装过程" tabindex="-1">2.2 安装过程 <a class="header-anchor" href="#_2-2-安装过程" aria-hidden="true">#</a></h3><p>以下将以IDEA为例展示ddd-archetype的安装使用过程，主要过程是：</p><p><code>克隆项目</code>--&gt;<code>archetype:create-from-project</code>--&gt;<code>install</code>--&gt;<code>archetype:crawl</code></p><h3 id="_2-2-1-克隆项目" tabindex="-1">2.2.1 克隆项目 <a class="header-anchor" href="#_2-2-1-克隆项目" aria-hidden="true">#</a></h3><p>将项目克隆到本地：</p><div class="language-shell"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#FFCB6B;">git</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">clone</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">https://github.com/feiniaojin/ddd-archetype.git</span></span>
<span class="line"></span></code></pre></div><p>直接使用主分支即可，然后使用IDEA打开该项目</p><p><img src="`+r+'" alt="DDD完整包结构"></p><h3 id="_2-2-2-archetype-create-from-project" tabindex="-1">2.2.2 archetype:create-from-project <a class="header-anchor" href="#_2-2-2-archetype-create-from-project" aria-hidden="true">#</a></h3><p>配置打开IDEA的<code>run/debug configurations</code>窗口，如下： <img src="'+l+'" alt="DDD完整包结构"></p><p>选择<code>add new configurations</code>，弹出以下窗口： <img src="'+s+`" alt="DDD完整包结构"></p><p>其中，上图中1～4各个标识的值为：</p><p>标识<code>1</code> - 选择&quot;+&quot;号；</p><p>标识<code>2</code> - 选择&quot;Maven&quot;;</p><p>标识<code>3</code> - 命令为：</p><div class="language-shell"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#FFCB6B;">archetype:create-from-project</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">-Darchetype.properties=archetype.properties</span></span>
<span class="line"></span></code></pre></div><blockquote><p>注意，在IDEA中添加的命令默认不需要加mvn</p></blockquote><p>标识<code>4</code> - 选择<code>ddd-archetype</code>的根目录</p><p>以上配置完成后，点击执行该命令。</p><h3 id="_2-2-3-install" tabindex="-1">2.2.3 install <a class="header-anchor" href="#_2-2-3-install" aria-hidden="true">#</a></h3><p>上一步执行完成且无报错之后，配置<code>install</code>命令。</p><p><img src="`+n+`" alt="DDD完整包结构"></p><p>其中，上图中1～2各个标识的值为：</p><p>标识<code>1</code> - 值为<code>install</code>；</p><p>标识<code>2</code> - 值为上一步运行的结果，路径为：</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#A6ACCD;">ddd-archetype/target/generated-sources/archetype</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><p><code>install</code>配置完成之后，点击执行。</p><h3 id="_2-2-4-archetype-crawl" tabindex="-1">2.2.4 archetype:crawl <a class="header-anchor" href="#_2-2-4-archetype-crawl" aria-hidden="true">#</a></h3><p><code>install</code>执行完成且无报错，接着配置<code>archetype:crawl</code>命令。</p><p><img src="`+d+`" alt="DDD完整包结构"></p><p>其中，标识1中的值为：</p><div class="language-shell"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#FFCB6B;">archetype:crawl</span></span>
<span class="line"></span></code></pre></div><p>配置完成，点击执行即可。</p><h3 id="_2-3-使用ddd-archetype初始化项目" tabindex="-1">2.3 使用ddd-archetype初始化项目 <a class="header-anchor" href="#_2-3-使用ddd-archetype初始化项目" aria-hidden="true">#</a></h3><ul><li><p>创建项目时，点击<code>manage catalogs</code>： <img src="`+i+'" alt="DDD完整包结构"></p></li><li><p>将本地的maven私服中的<code>archetype-catalog.xml</code>加入到catalogs中： <img src="'+o+'" alt="DDD完整包结构"></p></li></ul><p>添加成功，如下： <img src="'+h+'" alt="DDD完整包结构"></p><ul><li><p>创建项目时，选择本地archetype-catalog，并且选择<code>ddd-archetype</code>，填入项目信息并创建项目： <img src="'+_+'" alt="DDD完整包结构"></p></li><li><p>项目创建完成后： <img src="'+g+'" alt="DDD完整包结构"></p></li></ul><hr><div><img src="https://s1.ax1x.com/2023/04/15/p9p2mKP.jpg"></div><p>欢迎加入本书作者的知识星球，在星球中您将获得：</p><ul><li>本书作者答疑，无论是DDD学习过程中的问题，还是对现有项目进行DDD重构，都可以一起探讨</li><li>获得本书配套源码以及多个完整的DDD项目实战源码，包括权限系统、电商系统、校招平台、直播平台等项目</li><li>DDD属于开发中的高阶知识，历来掌握者寥寥，研究DDD的同行职级都不低，这里是拓宽人脉的好地方</li><li>与即将推出的《TOGAF架构方法论》、《悟道项目管理》、《悟道团队管理》、《悟道产品经理》等书共用一个星球，一次加入即可同时可获得其他知识专题的答疑</li></ul>',52),D=[m];function u(v,f,A,C,b,k){return c(),t("div",null,D)}const w=a(y,[["render",u]]);export{j as __pageData,w as default};
