import{_ as D,c as l,o as i,a as p}from"./app.0703c3d1.js";const h=JSON.parse('{"title":"全文导读","description":"","frontmatter":{},"headers":[],"relativePath":"0/0.3.md"}'),e={name:"0/0.3.md"},t=p('<h1 id="全文导读" tabindex="-1">全文导读 <a class="header-anchor" href="#全文导读" aria-hidden="true">#</a></h1><p>DDD（Domain-Driven Design，领域驱动设计）是面向对象的极致，是业务代码的巅峰，是微服务架构的灵魂。</p><p>DDD 火爆了二十年，然而至今鲜有成功落地的案例。大部分时候我们听得比较多的，都是“根据 DDD 的思想做的服务拆分“之类的话术，我个人感觉这种话术基本都是在碰瓷。</p><p>DDD 落地难的原因有很多：</p><ul><li><p>一方面，DDD 不是技术架构，没有明确的代码规范。事实上目前业界也没有很好的实践指南，因此无法像日常开发一样先定义接口文档，然后大家按照文档按图索骥地开发，每个人、每个研发团队对 DDD 的理解都不一样；</p></li><li><p>一方面，DDD 的门槛比较高，学习曲线非常陡峭。《 <strong>领域驱动设计 软件核心复杂性应对之道</strong> 》、《 <strong>实现领域驱动设计</strong> 》这两本书概念繁多、晦涩难懂，除此之外，还有经典四层架构、六边形架构、整洁架构、CQRS、应用服务、领域服务、领域事件等非常多的概念，里面水太深新手实在把握不住。</p></li></ul><p>有感于 DDD 落地难，因此作者希望借由本书向大家分享我个人的 DDD 实战经验和教训。我尝试着降低学习难度，为大家摸索一条稍微平坦的学习路径。我相信只要按照这个路径进行学习，读者一定都能掌握 DDD。</p><p>以下是全书导读：</p><ul><li>前言</li></ul><p>主要是前言、作者简介部分。</p><ul><li>初步认识领域驱动设计</li></ul><p>主要是带领读者初步认识领域驱动设计的一些核心概念，笔者试图用较少的篇幅，让读者对领域驱动设计有个大体的了解；之后会给读者介绍该如何学习 DDD，希望通过我的学习经历，使读者能少走弯路；笔者整理的目前 DDD 落地过程中的一些常见问题答疑，理清楚这些问题有利于念头通达，在学习的过程中就不会迷惘了。</p><ul><li>DDD应用架构</li></ul><p>主要讲解 DDD 落地时采用的应用架构。在我们将领域知识转化成代码时，需要有合适的应用架构去承接，我们经常看到很多尝试 DDD 的团队什么领域建模、限界上下文划分、子域划分搞得头头是道，但是落实到代码层面时根本无从下手，最直接的原因就是没有很好地理解应用架构。在本章，我将带领大家从常用的三层架构出发，一起推导出适合 DDD 的应用架构，大家掌握了该应用架构之后，不仅能落地 DDD，对大家的编码水平也能带来一定的提升。之后还会详细讲解该应用架构的各个模块，以及领域对象的生命周期、应用架构中各层交互时的数据类型流转。</p><ul><li>DDD核心概念</li></ul><p>主要讲解领域驱动设计的一些核心概念。之所以没有一开始就讲这些概念，是因为脱离了代码讲纯概念会让读者很难理解，因此我讲这一章安排在应用架构之后，希望能降低大家的理解难度。本章将会介绍实体和值对象、聚合与聚合根、领域服务等概念，这些可以说是 DDD 的核心概念了。领域事件也是非常重要的概念，会用专门的章节去讲。</p><ul><li>DDD核心组件</li></ul><p>讲解 DDD 涉及到的核心组件。这些组件的存在的目的，是为了维护领域对象的生命周期，一定是跟领域对象的生命周期息息相关的。其中 Factory 组件用于创建领域对象，Repository 组件用于加载和保存领域对象，两者的区别在于 Factory 是从 0 开始创造领域对象，Repository 则是用于维护已有的领域对象。</p><ul><li>复杂业务逻辑实现</li></ul><p>讲解如何在 DDD 中实现复杂的业务逻辑。我们前几章已经了解了许多 DDD 的概念，应用这些知识实现简单的业务逻辑相信是没有问题的，但是在实现复杂的逻辑时，难免有点束手束脚，这一章我将帮大家打通任督二脉，复杂的业务实现从此不在话下。</p><ul><li>领域事件</li></ul><p>领域事件也是 DDD 中非常核心的概念，领域事件在异步处理、跨聚合一致性、CQRS 中有非常重要的应用。我们将会探讨该以什么方式发布领域事件、领域事件消息该包含哪些内容、如何消费领域事件、如何确保领域事件不会丢失、如何确保领域事件消息不会重复消费等话题。</p><ul><li>CQRS与事件溯源</li></ul><p>我们有领域消息的基础后，我们将展开 CQRS与事件溯源 的学习。CQRS 是一个非常宽广的话题，我不仅会给大家介绍方法级别的 CQRS，也会给大家介绍架构级别的 CQRS。事件溯源的实现往往跟 CQRS 分不开，但事件溯源并不只是 CQRS，DDD 的实践者们一直在探索事件溯源的落地方案，在本章我将会给大家介绍我所采用的方案。</p><ul><li>一致性</li></ul><p>在本章我们将会讨论 DDD 下的一致性，例如如何实现聚合内的强制一致，以及跨聚合的最终一致性。</p><ul><li>战略设计</li></ul><p>在本章我们将学习DDD中的战略设计。战略设计是领域驱动设计中非常容易理解，但是也是领域驱动中非常不好把握的地方，DDD不应该止步于战略设计。</p><ul><li>生态建设</li></ul><p>DDD 落地难的原因，一方面是缺少成功案例，一方面也是生态基础的薄弱。笔者一直在探索如何对DDD开发进行提效。目前已完成了Maven Archetype和Code Generator，期待更多的同行加入，一起投身于 DDD 生态基础建设。</p><ul><li>代码质量</li></ul><p>在本章我们将会探讨 DDD 下的代码质量保障。我们使用 DDD 去落地复杂的业务逻辑，如果我们 DDD 工程本身的代码质量不高，往往是抛弃了一个大泥球，又自己亲手创造一个大泥球，所以我们在编码过程中要确保代码质量，提高代码的可读性、可维护性。</p><hr><div><img src="https://s1.ax1x.com/2023/04/15/p9p2mKP.jpg"></div><p>欢迎加入作者的知识星球，您将获得：</p><ul><li>作者答疑</li><li>配套源码以及多个完整的DDD项目源码，包括权限系统、电商系统、校招平台、直播平台等</li><li>抢先阅读即将推出的《架构方法论》、《悟道项目管理》、《悟道团队管理》、《悟道产品经理》</li></ul>',35),r=[t];function a(o,u,s,n,_,c){return i(),l("div",null,r)}const S=D(e,[["render",a]]);export{h as __pageData,S as default};
