import{_ as s,c as n,o as a,a as l}from"./app.8f865a3f.js";const C=JSON.parse('{"title":"无副作用函数（Side-Effect-Free Function）","description":"","frontmatter":{},"headers":[{"level":2,"title":"1. 无副作用函数的定义","slug":"_1-无副作用函数的定义","link":"#_1-无副作用函数的定义","children":[]},{"level":2,"title":"2. 无副作用函数的实现","slug":"_2-无副作用函数的实现","link":"#_2-无副作用函数的实现","children":[]}],"relativePath":"5/Side-Effect-FreeFunction.md"}'),p={name:"5/Side-Effect-FreeFunction.md"},o=l(`<h1 id="无副作用函数-side-effect-free-function" tabindex="-1">无副作用函数（Side-Effect-Free Function） <a class="header-anchor" href="#无副作用函数-side-effect-free-function" aria-hidden="true">#</a></h1><h2 id="_1-无副作用函数的定义" tabindex="-1">1. 无副作用函数的定义 <a class="header-anchor" href="#_1-无副作用函数的定义" aria-hidden="true">#</a></h2><p>无副作用函数不是什么新的概念，在《领域驱动设计 软件核心复杂性应对之道》、《实现领域驱动设计》、《重构 改善既有代码的设计》等许多书中均有提及。</p><p>函数的副作用指的是函数除了其声明的作用之外，还在函数体内部做了一些暗箱操作，主要是对外进行写操作，例如修改某些全局配置项、修改某些状态值。</p><p>这种未声明的副作用很容易导致线上系统出现无法预知的异常，引发线上事故。一般来说，某个特定的调用方、在某个特定的调用时机，调用这种有未声明副作用的函数，是可以得到正确的结果的，然而一旦其他调用方在不了解函数内部实现的情况下调用了这类函数，或者在错误的时机进行了调用，就很有可能导致错误的结果。</p><p>函数产生副作用的问题，在查询和命令不分离方法中也很常见：一个方法本应该是执行命令（Command），引起领域对象状态改变的，但是却返回了查询结果；一个方法本应该是查询(Query)，不应引起领域对象状态改变的，却在内部对外实施写操作，改变了领域对象的状态。因此，查询和命令要分开：要么实现为查询，纯粹返回查询结果；要么实现为命令，纯粹进行状态变更，不返回查询结果。</p><p>无副作用函数，也就是除了函数声明的作用外，不会引起其他隐藏变化的函数，执行某个函数（即方法）时，不会修改入参、不会修改外部的状态。无副作用函数之所以在领域驱动设计中再次被提及，主要是无副作用函数的特性与值对象非常贴合，无副作用函数搭配值对象使用，能使值对象如虎添翼。</p><p>函数产生副作用的问题，举个例子：</p><div class="language-java"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">ArticleEntity</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">findById</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">String</span><span style="color:#A6ACCD;"> articleId</span><span style="color:#89DDFF;">){</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">//根据id加载某个实体</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">ArticleEntity</span><span style="color:#A6ACCD;"> entity</span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;">repository</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">load</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">articleId</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">//生成一个缓存key，用于统计某个实体被访问的次数</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">String</span><span style="color:#A6ACCD;"> key</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">article:pv:</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">+</span><span style="color:#A6ACCD;">articleId</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">//缓存中访问次数加1</span></span>
<span class="line"><span style="color:#A6ACCD;">    cache</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">incr</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">key</span><span style="color:#89DDFF;">,</span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#A6ACCD;"> entity</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><p>以上这段代码的主要逻辑是：在 CMS 应用中，读者阅读某个文章时需要加载文章详情，因此提供 findById 方法，根据 articleId 加载文章实体，然而方法将 entity 返回之前，还操作缓存给这个文章的访问次数加 1。<code>findById</code>这个方法理应只进行查询返回文章实体，但却在执行过程中修改文章的访问次数，因此这个方法是有副作用的。</p><p>函数的副作用很容易导致很难排查的错误。以上面的代码为例，可能一开始的时候是正常运行的，在别的地方读取这个访问次数的缓存时，也能返回正确的访问次数。随着需求的迭代，某天有个定时任务不断地根据 articleId 调用 findById 方法查询实体，就会突然出现访问次数离奇增加的问题。</p><blockquote><p>实际项目中的统计某个页面的访问次数一般通过埋点和大数据实时处理，此处只是用来给展示函数的副作用，非生产环境实现方案。</p></blockquote><p>另外，方法缓存自己的查询结果是无副作用的，例如：</p><div class="language-java"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">ArticleEntity</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">findById2</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">String</span><span style="color:#A6ACCD;"> articleId</span><span style="color:#89DDFF;">){</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">String</span><span style="color:#A6ACCD;"> key</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">article:</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">+</span><span style="color:#A6ACCD;">articleId</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">ArticleEntity</span><span style="color:#A6ACCD;"> entity</span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;">cache</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">get</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">key</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">entity</span><span style="color:#89DDFF;">!=null){</span></span>
<span class="line"><span style="color:#A6ACCD;">		</span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#A6ACCD;"> entity</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">    entity</span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;">repository</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">load</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">articleId</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">    cache</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">set</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">key</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;">entity</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#A6ACCD;"> entity</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><p>findById2 这个方法通过 articleId 查询文章，查询时先尝试通过缓存获取，如果能获取到，直接返回从缓存中取出来的文章；如果获取不到则通过 repository 的 load 方法加载，并将其缓存。虽然在这个方法中也操作了缓存，但是并没有对外造成影响，所以 findById2 也是无副作用的。</p><h2 id="_2-无副作用函数的实现" tabindex="-1">2. 无副作用函数的实现 <a class="header-anchor" href="#_2-无副作用函数的实现" aria-hidden="true">#</a></h2><p>无副作用函数有两种实现方式：纯函数，以及不修改外部数据的非纯函数。</p><ul><li>纯函数</li></ul><p>纯函数是指，用于计算的所有输入均来自方法的入参，函数计算时不依赖非入参的数据，函数执行的结果只通过返回值传递到外部，不会修改入参的函数。</p><p>举个例子：</p><div class="language-java"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">//这是一个纯函数，函数不依赖非入参的外部数据，执行的结果通过返回值传递到外部</span></span>
<span class="line"><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">sum</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;"> x</span><span style="color:#89DDFF;">,</span><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;"> y</span><span style="color:#89DDFF;">){</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#A6ACCD;"> x</span><span style="color:#89DDFF;">+</span><span style="color:#A6ACCD;">y</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><ul><li>非纯函数</li></ul><p>非纯函数在执行的过程中依赖了外部的数据，如果希望非纯函数成为无副作用函数，那么非纯函数不应该修改外部的值。</p><div class="language-java"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">class</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">CustomInt</span><span style="color:#89DDFF;">{</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">private</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;"> a</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">CustomInt</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">a</span><span style="color:#89DDFF;">){</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">this.</span><span style="color:#A6ACCD;">a</span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;">a</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">//这个方法依赖了属性a，但是并没有修改a的值</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">plus</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">x</span><span style="color:#89DDFF;">){</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#A6ACCD;"> a</span><span style="color:#89DDFF;">+</span><span style="color:#A6ACCD;">x</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><p>以上这个 plus 方法在计算时不仅依赖入参 x，还需要依赖 CustomInt 的属性 a，因此 plus 方法是非纯函数。</p><p>虽然 plus 方法依赖了 CustomInt 的属性 a，但是 plus 方法并没有修改 a 的值，因此 plus 方法也是无副作用的。</p>`,26),e=[o];function t(c,r,y,D,i,A){return a(),n("div",null,e)}const d=s(p,[["render",t]]);export{C as __pageData,d as default};
