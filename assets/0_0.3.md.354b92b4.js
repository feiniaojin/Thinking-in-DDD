import{_ as D,c as e,o as t,a}from"./app.1136664d.js";const m=JSON.parse('{"title":"全文导读","description":"","frontmatter":{},"headers":[],"relativePath":"0/0.3.md"}'),p={name:"0/0.3.md"},r=a('<h1 id="全文导读" tabindex="-1">全文导读 <a class="header-anchor" href="#全文导读" aria-hidden="true">#</a></h1><p>DDD（Domain-Driven Design，领域驱动设计）是面向对象和SOLID演化的极致，是业务代码的巅峰，是微服务架构的灵魂。</p><p>虽然DDD非常火爆，但鲜有完整落地的案例。大部分时候，我们听得比较多的，都是“根据DDD的思想做的服务拆分“之类的话术。我个人感觉这种话术基本都是在碰瓷。</p><p>DDD落地难的原因有很多：</p><ul><li>一方面，DDD不是技术架构，没有明确的代码规范。事实上目前业界也没有很好的实践指南，因此无法像日常开发一样先定个接口文档然后大家按照文档按图索骥地开发，每个人、每个研发团队的理解程度不一样；</li><li>一方面，DDD的门槛比较高，学习曲线非常陡峭。《 <strong>领域驱动设计 软件核心复杂性应对之道</strong> 》、《 <strong>实现领域驱动设计</strong> 》这两本书概念繁多、晦涩难懂，除此之外，还有经典四层架构、六边形架构、整洁架构、CQRS、应用服务、领域服务、领域事件等非常多的概念，里面水太深新手实在把握不住。</li></ul><p>因此，本书尝试为大家提供一条平坦的学习路径，只要按照这个路径进行学习，读者一定能掌握DDD。</p><p>以下是全书的脉络：</p><p>第0章，主要是前言、作者简介部分。</p><p>第1章，1.1主要是带领读者初步认识领域驱动设计的一些核心概念，笔者试图用较少的篇幅，让读者对领域驱动设计有个大体的了解；1.2之后会给读者介绍该如何学习DDD，希望通过我的学习经历，使读者能少走弯路；1.3则是笔者整理的目前DDD落地过程中的一些常见问题答疑，理清楚这些问题有利于念头通达，在学习的过程中就不会迷惘了。</p><p>第2章，主要讲解DDD落地时采用的应用架构。在我们将领域知识转化成代码时，需要有合适的应用架构去承接，我们经常看到很多尝试DDD的团队什么领域建模、限界上下文划分、子域划分搞得头头是道，但是落实到代码层面时根本无从下手，最直接的原因就是没有很好的应用架构。在本章，我将带领大家从常用的三层架构出发，一起推导出适合DDD的应用架构，大家掌握了该应用架构之后，不仅能落地DDD，对大家的编码水平也能带来一定的提升。之后还会详细讲解该应用架构的各个模块，以及领域对象的生命周期、应用架构中各层交互时的数据类型流转。</p><p>第3章，主要讲解领域驱动设计的一些核心概念。之所以没有一开始就讲这些概念，是因为脱离了代码讲纯概念会让读者很难理解，因此我讲这一章安排在应用架构之后，希望能降低大家的理解难度。本章将会介绍实体和值对象、聚合与聚合根，以及限界上下文等概念，这些可以说是DDD的核心概念了。领域事件也是非常重要的概念，我们放到第6章去专门讲。</p>',11),_=[r];function n(o,s,i,c,d,l){return t(),e("div",null,_)}const f=D(p,[["render",n]]);export{m as __pageData,f as default};
