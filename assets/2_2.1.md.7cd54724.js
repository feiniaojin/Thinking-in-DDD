import{_ as s,c as a,o as n,a as l}from"./app.9803107f.js";const F=JSON.parse('{"title":"现有应用架构存在的问题","description":"","frontmatter":{},"headers":[{"level":2,"title":"1. 分层架构","slug":"_1-分层架构","link":"#_1-分层架构","children":[]},{"level":2,"title":"2. 分层架构优点","slug":"_2-分层架构优点","link":"#_2-分层架构优点","children":[]},{"level":2,"title":"3. 分层架构存在的问题","slug":"_3-分层架构存在的问题","link":"#_3-分层架构存在的问题","children":[{"level":3,"title":"3.1 底层缺乏抽象","slug":"_3-1-底层缺乏抽象","link":"#_3-1-底层缺乏抽象","children":[]},{"level":3,"title":"3.2 Service 方法职责不单一","slug":"_3-2-service-方法职责不单一","link":"#_3-2-service-方法职责不单一","children":[]},{"level":3,"title":"3.3 Service 方法难以进行测试","slug":"_3-3-service-方法难以进行测试","link":"#_3-3-service-方法难以进行测试","children":[]}]}],"relativePath":"2/2.1.md"}'),p={name:"2/2.1.md"},e=l(`<h1 id="现有应用架构存在的问题" tabindex="-1">现有应用架构存在的问题 <a class="header-anchor" href="#现有应用架构存在的问题" aria-hidden="true">#</a></h1><h2 id="_1-分层架构" tabindex="-1">1. 分层架构 <a class="header-anchor" href="#_1-分层架构" aria-hidden="true">#</a></h2><p>目前许多项目使用的架构基本都是分层架构。特别地，在 Java Web 服务端开发中，习惯性地将应用分为三层：Controller 层、Service 层、Dao 层。</p><p><img src="https://s1.ax1x.com/2023/04/22/p9VMUlF.png" alt="贫血模型三层架构"></p><p>Controller 层：接受请求，调用 Service 完成业务操作，并将 Service 出参拼装为响应报文向客户端返回。</p><p>Service 层：初衷时在 Service 层实现业务逻辑。</p><p>Dao：负责与数据库进行交互，向数据库发送 SQL 语句完成 CRUD。</p><p>其中 Controller 层依赖 Service 层，Service 层依赖 Dao 层。</p><h2 id="_2-分层架构优点" tabindex="-1">2. 分层架构优点 <a class="header-anchor" href="#_2-分层架构优点" aria-hidden="true">#</a></h2><p>分层架构具有许多优点：</p><ul><li>关注点分离</li></ul><p>分层架构每一层职责明确，能很好地实践单一职责的原则，每一层只关注自己的职责即可。</p><ul><li>低耦合</li></ul><p>上层依赖下层，单方向的依赖，不会产生循环依赖。</p><ul><li>复用性强</li></ul><p>下层可以被多个上层依赖，在多个上层中复用。</p><h2 id="_3-分层架构存在的问题" tabindex="-1">3. 分层架构存在的问题 <a class="header-anchor" href="#_3-分层架构存在的问题" aria-hidden="true">#</a></h2><p>分层架构具备如此多的优点，所以在开发中被广泛使用。如果我们开发过程中缺乏思考，也会引入一些问题。</p><h3 id="_3-1-底层缺乏抽象" tabindex="-1">3.1 底层缺乏抽象 <a class="header-anchor" href="#_3-1-底层缺乏抽象" aria-hidden="true">#</a></h3><p>我们经常能看到这样的情况：每一层的方法名字都是一样的，并没有体现出越上层越具体，越底层越抽象的设计思路。</p><p>Controller 层：</p><div class="language-java"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">class</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Controller</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">void</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">updateTitleById</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">Param</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">param</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">        service</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">updateTitleById</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">param</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><p>Service 层：</p><div class="language-java"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">class</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Service</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">void</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">updateTitleById</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">Param</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">param</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">        dao</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">updateTitleById</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">param</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><p>Dao 层：</p><div class="language-java"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">class</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Dao</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">void</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">updateTitleById</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">Param</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">param</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">        </span><span style="color:#676E95;font-style:italic;">//TODO update db</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><p>上面的 Controller、Service、Dao 各层的 updateTitleById 方法中，分别根据根据自己所处的分层，进行了对应的处理。但是，如果 Controller 每增加一个业务方法，那么 Service 和 Dao 都会增加一个对应的方法，也就意味着底层的方法缺乏抽象。</p><p>解决的办法也很简单，Service 是具体业务操作的实现，所以在新增业务操作时，增加新的业务方法无可厚非，但是 Dao 层可以抽象出更通用的方法。</p><h3 id="_3-2-service-方法职责不单一" tabindex="-1">3.2 Service 方法职责不单一 <a class="header-anchor" href="#_3-2-service-方法职责不单一" aria-hidden="true">#</a></h3><p>在贫血模型分层架构中，原本预期 Service 方法的职责是为了实现业务逻辑，然而在实际中还会引入缓存、远程调用、消息发布、事务控制等操作，这些代码与业务代码交织在一起，尤其是贫血模型时还会存在一堆的 set 方法，由于职责不单一，因而造成了 Service 方法膨胀，很难维护。</p><div class="language-java"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">class</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Service</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">//有时候还要进行事务控制</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">@</span><span style="color:#C792EA;">Transactional</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">void</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">doBizLogic</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">DTO</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">dto</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">        </span><span style="color:#676E95;font-style:italic;">//参数校验</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#82AAFF;">checkParam</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">dto</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#89DDFF;">        </span><span style="color:#676E95;font-style:italic;">//RPC调用，查询一些数据</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#C792EA;">SomeData</span><span style="color:#A6ACCD;"> someData </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> rpc</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">querySomeData</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">dto</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">getId</span><span style="color:#89DDFF;">());</span></span>
<span class="line"><span style="color:#89DDFF;">        </span><span style="color:#676E95;font-style:italic;">//TODO 核心业务逻辑</span></span>
<span class="line"><span style="color:#89DDFF;">        </span><span style="color:#676E95;font-style:italic;">//数据库操作</span></span>
<span class="line"><span style="color:#A6ACCD;">        dao</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">updateTitleById</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">UpdateParam</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#89DDFF;">        </span><span style="color:#676E95;font-style:italic;">//中间件，删除缓存</span></span>
<span class="line"><span style="color:#A6ACCD;">        cache</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">del</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">key</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#89DDFF;">        </span><span style="color:#676E95;font-style:italic;">//中间件，发布消息</span></span>
<span class="line"><span style="color:#A6ACCD;">        mqProducer</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">send</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">msg</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><h3 id="_3-3-service-方法难以进行测试" tabindex="-1">3.3 Service 方法难以进行测试 <a class="header-anchor" href="#_3-3-service-方法难以进行测试" aria-hidden="true">#</a></h3><p>Service 方法是执行业务逻辑的核心方法，所以必须对其进行有效的单元测试。</p><p>由于 Service 方法的职责不单一，往往引进了很多基础设施的操作，因此很难对这些方法进行有效的单元测试。在测试上面的 Service 方法时，实现起来会非常麻烦：要么测试时把所有的中间件调用操作都 mock 掉，要么提供全套的中间件的测试环境，不管是哪一种，都给 TDD 的实践带来障碍。</p><hr><div><img src="https://s1.ax1x.com/2023/04/15/p9p2mKP.jpg"></div><p>欢迎加入本书作者的知识星球，在星球中您将获得：</p><ul><li>本书作者答疑，无论是DDD学习过程中的问题，还是对现有项目进行DDD重构，都可以一起探讨</li><li>获得本书配套源码以及多个完整的DDD项目实战源码，包括权限系统、电商系统、校招平台、直播平台等项目</li><li>DDD属于开发中的高阶知识，历来掌握者寥寥，研究DDD的同行职级都不低，这里是拓宽人脉的好地方</li><li>与即将推出的《TOGAF架构方法论》、《悟道项目管理》、《悟道团队管理》、《悟道产品经理》等书共用一个星球，一次加入即可同时可获得其他知识专题的答疑</li></ul>`,38),o=[e];function c(t,r,i,D,y,A){return n(),a("div",null,o)}const d=s(p,[["render",c]]);export{F as __pageData,d as default};
