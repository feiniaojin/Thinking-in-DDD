import{_ as e,c as i,o as l,a}from"./app.8f865a3f.js";const u=JSON.parse('{"title":"战略设计","description":"","frontmatter":{},"headers":[{"level":2,"title":"1. 战略设计的概念理解","slug":"_1-战略设计的概念理解","link":"#_1-战略设计的概念理解","children":[]},{"level":2,"title":"2. 战略设计的误区","slug":"_2-战略设计的误区","link":"#_2-战略设计的误区","children":[]}],"relativePath":"StrategicDesign/StrategicDesign.md"}'),t={name:"StrategicDesign/StrategicDesign.md"},p=a('<h1 id="战略设计" tabindex="-1">战略设计 <a class="header-anchor" href="#战略设计" aria-hidden="true">#</a></h1><h2 id="_1-战略设计的概念理解" tabindex="-1">1. 战略设计的概念理解 <a class="header-anchor" href="#_1-战略设计的概念理解" aria-hidden="true">#</a></h2><p>在 DDD 中，战略设计是其中的重要组成部分，它主要关注如何将业务领域划分为不同的子域，并在子域之间建立良好的关系，以支持系统的可扩展性和灵活性。战略设计是领域驱动设计中非常容易理解，但是也是领域驱动中非常不好把握的地方。</p><p>战略设计主要包括以下几个方面：</p><ul><li>确定限界上下文</li></ul><p>限界上下文是指一个特定的业务领域内的一组相关的概念、规则和约束条件。</p><p>这个边界是由业务需求和实现技术共同决定的，它可以是物理的、逻辑的或者是组织上的。在这个边界内，有着自己的术语、模型和规则，与其他限界上下文之间进行交互时需要进行显式的协调和翻译。</p><p>例如，在电商系统的设计中，订单、商品、用户、营销是分别是不同的业务概念，可以根据业务划分到不同的限界上下文中。</p><ul><li>确定上下文映射</li></ul><p>在战略设计阶段，我们可以明确不同地上下文之间如何进行协作。</p><ul><li>划分子域</li></ul><p>子域代表了业务领域中相对独立的部分。划分子域需要考虑业务上的相对独立性、可重用性和可扩展性等因素。一个好的子域应该具有清晰的业务边界和明确的职责范围，同时应该与其他子域之间保持松耦合的关系。</p><p>例如，在一个电商系统中，可以将订单、商品、用户等作为不同的子域：订单子域负责处理订单相关的业务逻辑，商品子域负责处理商品相关的业务逻辑，用户子域负责处理用户相关的业务逻辑。这样可以将系统分解为不同的部分，每个部分负责自己的业务逻辑，从而提高系统的可维护性和可扩展性。</p><ul><li>设计聚合根</li></ul><p>对限界上下文内的业务概念进行建模，得到一系列的实体和值对象，实体和值对象又形成聚合根。聚合根是实现业务逻辑的核心，它负责协调聚合内部对象之间的交互，同时也是聚合内部对象之间的唯一访问入口。</p><p>例如，在上面的电商系统中，订单可以作为聚合根，它包含了订单明细、收货地址等相关信息。订单负责维护订单明细和收货地址之间的关系，并且对外提供统一的接口，例如创建订单、查询订单等。</p><ul><li>设计领域服务</li></ul><p>不适合建模到实体中的行为，可以建模为领域服务。</p><ul><li>维护通用语言</li></ul><h2 id="_2-战略设计的误区" tabindex="-1">2. 战略设计的误区 <a class="header-anchor" href="#_2-战略设计的误区" aria-hidden="true">#</a></h2><p>战略设计本身只是系统的设计阶段，还没有落实到编码，如果把过多的精力都集中在战略设计阶段，忽视战术设计，最后肯定会回归到贫血模型，也就造成了当经领域驱动设计无法落地的尴尬局面。</p><p>许多团队产出了很多精美的战略设计架构图例，例如限界上下文划分图、子域划分图，然后做了精美的 PPT 在各大技术交流的会议上分享其 DDD 落地经验，其实他们只是画了几个图自嗨，充其量只能产出贫血模型的代码，并没有实践真正的领域驱动设计。</p><p>另外，由于战略设计对系统的限界上下文划分，和我们从前进行系统设计时并无太大的差异，都是对一个事物的描述，不可能领域驱动设计和传统的软件设计产生截然不同的建模结果。例如，即使开发者没有接触过 DDD ，也会自然而然地把订单和产品信息分成不同的模块去开发，因此很多准备接触 DDD 的人惊呼，这也叫领域驱动设计，不是换汤不换药吗？</p><p>因此，战略设计很重要，但是绝对不应该止步于战略设计。</p><p>战略设计部分，在《领域驱动设计》一书中位于第四部分，然而在《实现领域驱动设计》一书中位于第二章。《实现领域驱动设计》一书虽然按照总-分的结构行文，但是由于其影响力，使得许多人认为战略设计是 DDD 落地的先决条件，进而投入了大量的精力到战略设计阶段，使得战术设计被忽略。</p><p>本书将花费比较少的篇幅来介绍战略设计，更多地将关注点放在战术设计的落地上。</p><hr><div><img src="https://s1.ax1x.com/2023/04/15/p9p2mKP.jpg"></div><p>欢迎加入本书作者的知识星球，在星球中您将获得：</p><ul><li>本书作者答疑，无论是DDD学习过程中的问题，还是对现有项目进行DDD重构，都可以一起探讨</li><li>获得本书配套源码以及多个完整的DDD项目实战源码，包括权限系统、电商系统、校招平台、直播平台等项目</li><li>DDD属于开发中的高阶知识，历来掌握者寥寥，研究DDD的同行职级都不低，这里是拓宽人脉的好地方</li><li>与即将推出的《TOGAF架构方法论》、《悟道项目管理》、《悟道团队管理》、《悟道产品经理》等书共用一个星球，一次加入即可同时可获得其他知识专题的答疑</li></ul>',30),r=[p];function s(D,n,_,c,d,h){return l(),i("div",null,r)}const g=e(t,[["render",s]]);export{u as __pageData,g as default};
