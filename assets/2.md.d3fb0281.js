import{_ as s,o as n,c as a,a as l}from"./app.a6a6b7a4.js";const F=JSON.parse('{"title":"第2章 应用架构","description":"","frontmatter":{},"headers":[{"level":2,"title":"2.1 贫血模型和充血模型","slug":"_2-1-贫血模型和充血模型","link":"#_2-1-贫血模型和充血模型","children":[{"level":3,"title":"2.1.1 对象的属性和行为","slug":"_2-1-1-对象的属性和行为","link":"#_2-1-1-对象的属性和行为","children":[]},{"level":3,"title":"2.1.2 贫血模型","slug":"_2-1-2-贫血模型","link":"#_2-1-2-贫血模型","children":[]},{"level":3,"title":"2.1.3 充血模型","slug":"_2-1-3-充血模型","link":"#_2-1-3-充血模型","children":[]},{"level":3,"title":"2.1.4 DDD对模型的要求","slug":"_2-1-4-ddd对模型的要求","link":"#_2-1-4-ddd对模型的要求","children":[]}]},{"level":2,"title":"2.2 经典贫血三层架构","slug":"_2-2-经典贫血三层架构","link":"#_2-2-经典贫血三层架构","children":[{"level":3,"title":"2.2.1 常用的经典贫血三层架构","slug":"_2-2-1-常用的经典贫血三层架构","link":"#_2-2-1-常用的经典贫血三层架构","children":[]},{"level":3,"title":"2.2.2 分层架构的优点","slug":"_2-2-2-分层架构的优点","link":"#_2-2-2-分层架构的优点","children":[]},{"level":3,"title":"2.2.3 分层架构存在的问题","slug":"_2-2-3-分层架构存在的问题","link":"#_2-2-3-分层架构存在的问题","children":[]}]},{"level":2,"title":"2.3 DDD常见的应用架构","slug":"_2-3-ddd常见的应用架构","link":"#_2-3-ddd常见的应用架构","children":[{"level":3,"title":"2.3.1 经典四层架构","slug":"_2-3-1-经典四层架构","link":"#_2-3-1-经典四层架构","children":[]},{"level":3,"title":"2.3.2 端口和适配器架构","slug":"_2-3-2-端口和适配器架构","link":"#_2-3-2-端口和适配器架构","children":[]}]},{"level":2,"title":"2.4 应用架构演化推导","slug":"_2-4-应用架构演化推导","link":"#_2-4-应用架构演化推导","children":[{"level":3,"title":"2.4.1 第一步、数据模型与DAO层合并","slug":"_2-4-1-第一步、数据模型与dao层合并","link":"#_2-4-1-第一步、数据模型与dao层合并","children":[]},{"level":3,"title":"2.4.2 第二步、Service层抽取业务逻辑","slug":"_2-4-2-第二步、service层抽取业务逻辑","link":"#_2-4-2-第二步、service层抽取业务逻辑","children":[]},{"level":3,"title":"2.4.3 第三步、维护领域对象生命周期","slug":"_2-4-3-第三步、维护领域对象生命周期","link":"#_2-4-3-第三步、维护领域对象生命周期","children":[]},{"level":3,"title":"2.4.4 第四步、泛化抽象","slug":"_2-4-4-第四步、泛化抽象","link":"#_2-4-4-第四步、泛化抽象","children":[]},{"level":3,"title":"2.4.5 第五步、完整的包结构","slug":"_2-4-5-第五步、完整的包结构","link":"#_2-4-5-第五步、完整的包结构","children":[]}]},{"level":2,"title":"2.5 领域对象的生命周期","slug":"_2-5-领域对象的生命周期","link":"#_2-5-领域对象的生命周期","children":[{"level":3,"title":"2.5.1 领域对象的生命周期","slug":"_2-5-1-领域对象的生命周期","link":"#_2-5-1-领域对象的生命周期","children":[]},{"level":3,"title":"2.5.2 领域对象的创建过程","slug":"_2-5-2-领域对象的创建过程","link":"#_2-5-2-领域对象的创建过程","children":[]},{"level":3,"title":"2.5.3 领域对象的重建过程","slug":"_2-5-3-领域对象的重建过程","link":"#_2-5-3-领域对象的重建过程","children":[]},{"level":3,"title":"2.5.4 领域对象的归档过程","slug":"_2-5-4-领域对象的归档过程","link":"#_2-5-4-领域对象的归档过程","children":[]}]},{"level":2,"title":"2.6 应用架构各层间的对象类型转换","slug":"_2-6-应用架构各层间的对象类型转换","link":"#_2-6-应用架构各层间的对象类型转换","children":[{"level":3,"title":"2.6.1 应用架构各层的数据类型","slug":"_2-6-1-应用架构各层的数据类型","link":"#_2-6-1-应用架构各层的数据类型","children":[]},{"level":3,"title":"2.6.2 查询过程的类型转换","slug":"_2-6-2-查询过程的类型转换","link":"#_2-6-2-查询过程的类型转换","children":[]},{"level":3,"title":"2.6.3 创建过程的类型转换","slug":"_2-6-3-创建过程的类型转换","link":"#_2-6-3-创建过程的类型转换","children":[]},{"level":3,"title":"2.6.4 修改过程的类型转换","slug":"_2-6-4-修改过程的类型转换","link":"#_2-6-4-修改过程的类型转换","children":[]}]}],"relativePath":"2.md"}'),p={name:"2.md"},o=l(`<h1 id="第2章-应用架构" tabindex="-1">第2章 应用架构 <a class="header-anchor" href="#第2章-应用架构" aria-hidden="true">#</a></h1><h2 id="_2-1-贫血模型和充血模型" tabindex="-1">2.1 贫血模型和充血模型 <a class="header-anchor" href="#_2-1-贫血模型和充血模型" aria-hidden="true">#</a></h2><h3 id="_2-1-1-对象的属性和行为" tabindex="-1">2.1.1 对象的属性和行为 <a class="header-anchor" href="#_2-1-1-对象的属性和行为" aria-hidden="true">#</a></h3><p>在学习贫血模型和充血模型之前，首先要理解对象的属性和对象的行为这两个概念。 对象的属性：指的是对象的内部状态，通常表现为类的属性。 对象的行为：指的是对象具备的能力，通常表现为类的方法。</p><h3 id="_2-1-2-贫血模型" tabindex="-1">2.1.2 贫血模型 <a class="header-anchor" href="#_2-1-2-贫血模型" aria-hidden="true">#</a></h3><p>贫血模型指的是只有属性没有行为的模型。我们目前开发中经常用的 Java Bean，实际上就是贫血模型，例如：</p><div class="language-java"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">/**</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> * Computer类中只有属性，没有行为，所以是贫血模型</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> */</span></span>
<span class="line"><span style="color:#89DDFF;">@</span><span style="color:#C792EA;">Data</span></span>
<span class="line"><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">class</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Computer</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">    /**</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">     * 操作系统</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">     */</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">private</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">String</span><span style="color:#A6ACCD;"> os</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">    /**</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">     * 键盘</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">     */</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">private</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">String</span><span style="color:#A6ACCD;"> keyboard</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">//……其他属性</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><h3 id="_2-1-3-充血模型" tabindex="-1">2.1.3 充血模型 <a class="header-anchor" href="#_2-1-3-充血模型" aria-hidden="true">#</a></h3><p>充血模型是指既有属性也有行为的模型。</p><p>如果我们采用面向对象的思想去建模，则产出的模型应该既有属性，也有行为，那么这种模型就是充血模型。</p><p>例如下面的 VideoPlayer 类，既有属性（playlist），也有行为（play 方法），则 VideoPlayer 是充血模型。</p><div class="language-java"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">/**</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> * 视频播放器</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> */</span></span>
<span class="line"><span style="color:#89DDFF;">@</span><span style="color:#C792EA;">Data</span></span>
<span class="line"><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">class</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">VideoPlayer</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">    /**</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">     * 播放列表</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">     */</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">List</span><span style="color:#89DDFF;">&lt;</span><span style="color:#C792EA;">String</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;"> playlist</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">    /**</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">     * 播放节目</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">     */</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">void</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">play</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;font-style:italic;">for</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">String</span><span style="color:#A6ACCD;"> v </span><span style="color:#89DDFF;font-style:italic;">:</span><span style="color:#A6ACCD;"> playlist</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">            System</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">out</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">printf</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">正在播放：</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">+</span><span style="color:#A6ACCD;"> v</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><h3 id="_2-1-4-ddd对模型的要求" tabindex="-1">2.1.4 DDD对模型的要求 <a class="header-anchor" href="#_2-1-4-ddd对模型的要求" aria-hidden="true">#</a></h3><p>由于使用贫血模型写代码太方便了，因此大部分 Java 程序员习惯了使用贫血模型。贫血模型的使用方式大概时这样的：先通过 ORM 框架从数据库查询数据，然后在 Service 层的方法中操作这些数据对象完成业务逻辑，然后 Service 层中调用 ORM 框架将之行结果更新到数据库中。</p><p>在这种开发方式中，Service 承担了实现所有业务逻辑的责任，稍微遗漏了业务逻辑的约束，就会造成问题。贫血模型只是提供了属性数据的容器，然后向 Service 公开了这些属性，操作这些属性完成业务逻辑的职责转嫁给了 Service，这会导致 Service 所有的方法都必须充分了解模型的领域知识，许多业务规则得不到很好的封装。 我们经常看到某个业务校验的逻辑在每个 Service 方法里面都出现一次，就是贫血模型泄漏了领域知识造成的。</p><p>充血模型拥有完整的属性，同时具备业务行为（即业务方法），因此 Service 只要调用充血模型的行为，充血模型内部即自行修改对应的状态以完成业务操作，Service 再也不需要理解领域的业务规则了，因为都是充血模型自己在维护。</p><p>DDD 要求使用充血模型完成业务逻辑，以上面的 VideoPlayer 为例：</p><div class="language-java"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">class</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">VideoApplicationService</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">void</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">play</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">        </span><span style="color:#676E95;font-style:italic;">//TODO 1.获得领域对象</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">        </span><span style="color:#676E95;font-style:italic;">//2. 执行业务操作，Service只需要调用充血模型的行为就能完成业务操作，</span></span>
<span class="line"><span style="color:#89DDFF;">        </span><span style="color:#676E95;font-style:italic;">//   不再需要了解播放的逻辑</span></span>
<span class="line"><span style="color:#A6ACCD;">        videoPlayer</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">play</span><span style="color:#89DDFF;">();</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><p>可以看到，当采用充血模型的建模方式后，业务逻辑由对应的充血模型进行维护，被很好地封装在模型中，Service 方法会变得清晰明了。</p><h2 id="_2-2-经典贫血三层架构" tabindex="-1">2.2 经典贫血三层架构 <a class="header-anchor" href="#_2-2-经典贫血三层架构" aria-hidden="true">#</a></h2><h3 id="_2-2-1-常用的经典贫血三层架构" tabindex="-1">2.2.1 常用的经典贫血三层架构 <a class="header-anchor" href="#_2-2-1-常用的经典贫血三层架构" aria-hidden="true">#</a></h3><p>目前许多项目使用的架构基本都是分层架构。特别地，在 Java Web 服务端开发中，习惯性地将应用分为三层：Controller 层、Service 层、Dao 层。</p><p>Controller 层：接受请求，调用 Service 完成业务操作，并将 Service 出参拼装为响应报文向客户端返回。</p><p>Service 层：初衷时在 Service 层实现业务逻辑。</p><p>Dao：负责与数据库进行交互，向数据库发送 SQL 语句完成 CRUD。</p><p>其中 Controller 层依赖 Service 层，Service 层依赖 Dao 层。</p><h3 id="_2-2-2-分层架构的优点" tabindex="-1">2.2.2 分层架构的优点 <a class="header-anchor" href="#_2-2-2-分层架构的优点" aria-hidden="true">#</a></h3><p>分层架构具有许多优点：</p><ul><li>关注点分离 分层架构每一层职责明确，能很好地实践单一职责的原则，每一层只关注自己的职责即可。</li><li>低耦合 上层依赖下层，单方向的依赖，不会产生循环依赖。</li><li>复用性强 下层可以被多个上层依赖，在多个上层中复用。</li></ul><h3 id="_2-2-3-分层架构存在的问题" tabindex="-1">2.2.3 分层架构存在的问题 <a class="header-anchor" href="#_2-2-3-分层架构存在的问题" aria-hidden="true">#</a></h3><p>分层架构具备如此多的优点，所以在开发中被广泛使用。如果我们开发过程中缺乏思考，也会引入一些问题。</p><ul><li>底层缺乏抽象</li></ul><p>我们经常能看到这样的情况：每一层的方法名字都是一样的，并没有体现出“越上层越具体，越底层越抽象”的设计思路。</p><p>Controller 层：</p><div class="language-java"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">class</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Controller</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">void</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">updateTitleById</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">Param</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">param</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">        service</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">updateTitleById</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">param</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><p>Service 层：</p><div class="language-java"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki material-palenight"><code><span class="line"></span>
<span class="line"><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">class</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Service</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">void</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">updateTitleById</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">Param</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">param</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">        dao</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">updateTitleById</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">param</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><p>Dao 层：</p><div class="language-java"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">class</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Dao</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">void</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">updateTitleById</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">Param</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">param</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">        </span><span style="color:#676E95;font-style:italic;">//TODO update db</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><p>上面的 Controller、Service、Dao 各层的 updateTitleById 方法中，分别根据根据自己所处的分层，进行了对应的处理。但是，如果 Controller 每增加一个业务方法，那么 Service 和 Dao 都会增加一个对应的方法，也就意味着底层的方法缺乏抽象。</p><p>解决的办法也很简单，Service 是具体业务操作的实现，所以在新增业务操作时，增加新的业务方法无可厚非，但是 Dao 层可以抽象出更通用的方法。</p><h2 id="_2-3-ddd常见的应用架构" tabindex="-1">2.3 DDD常见的应用架构 <a class="header-anchor" href="#_2-3-ddd常见的应用架构" aria-hidden="true">#</a></h2><h3 id="_2-3-1-经典四层架构" tabindex="-1">2.3.1 经典四层架构 <a class="header-anchor" href="#_2-3-1-经典四层架构" aria-hidden="true">#</a></h3><p>经典的四层架构将软件系统分为四个层次，每个层次都有不同的职责和功能。下面我们将详细介绍一下这个经典的四层架构，其架构如下图。</p><ul><li>第一层：用户界面层</li></ul><p>用户界面（User Interface）层是软件系统的最外层，它负责与用户进行交互，接收用户的输入和展示系统的输出。用户界面层通常包括各种图形界面、Web界面、移动端应用等。</p><p>用户界面层不应该包含任何业务逻辑，它只是一个纯粹的外壳，将用户的请求传递给下一层处理。</p><ul><li>第二层：应用服务层</li></ul><p>应用服务层既不包含业务逻辑，也不应该包含任何与具体技术相关的代码，应用服务层协调领域模型和基础设施层一起完成业务操作。</p><p>应用服务层需要将用户请求转换为领域模型可以理解的形式，并将处理结果返回给用户界面层。</p><ul><li>第三层：领域模型层</li></ul><p>领域模型层是软件系统的核心，它负责描述业务领域中的各种概念和规则。领域模型层通常包括各种实体、值对象、聚合根等。</p><p>领域模型层应该包含业务逻辑和业务规则，但是不应该包含任何与具体技术相关的代码。</p><ul><li>第四层：基础设施层</li></ul><p>基础设施层是软件系统的最底层，它负责提供各种基础设施支持，如数据库访问、缓存、消息队列、日志等。基础设施层应该只包含与具体技术相关的代码，不应该包含任何业务逻辑。</p><h3 id="_2-3-2-端口和适配器架构" tabindex="-1">2.3.2 端口和适配器架构 <a class="header-anchor" href="#_2-3-2-端口和适配器架构" aria-hidden="true">#</a></h3><p>端口和适配器架构（又称为六边形架构）的核心思想是将业务逻辑从技术细节中解耦，使得业务逻辑能够独立于任何特定的技术实现。它通过引入两个关键概念来达到这个目标：端口（Port）和适配器（Adapter）。</p><p>端口是系统与外部世界进行交互的接口，它定义了系统对外提供的服务。一个端口可以是一个接口或者一个抽象类，它定义了一组可以被外部系统调用的方法。通过定义端口，系统可以明确地表达出自己的能力和职责。</p><p>适配器则分为两种，Driving Adapter用于对外暴露端口，Driven Adapter为Business Logic提供支持，对Port中使用的接口进行实现。</p><h2 id="_2-4-应用架构演化推导" tabindex="-1">2.4 应用架构演化推导 <a class="header-anchor" href="#_2-4-应用架构演化推导" aria-hidden="true">#</a></h2><p>常见的DDD实现架构有很多种，如经典四层架构、六边形（适配器端口）架构、CQRS架构等。架构无优劣高下之分，只要熟练掌握就都是合适的架构。</p><p>本章我们将从日常的三层架构出发，推导出我们自己的应用架构。</p><p>我们很多项目是基于三层架构的，其结构如图： //TODO 待补充 我们说三层架构，为什么还画了一层 Model 呢？因为 Model 只是简单的 Java Bean，里面只有数据库表对应的属性，有的应用会将其单独拎出来作为一个 Maven Module，但实际上可以合并到 DAO 层。</p><p>接下来我们开始对这个三层架构进行抽象精炼。</p><h3 id="_2-4-1-第一步、数据模型与dao层合并" tabindex="-1">2.4.1 第一步、数据模型与DAO层合并 <a class="header-anchor" href="#_2-4-1-第一步、数据模型与dao层合并" aria-hidden="true">#</a></h3><p>为什么数据模型要与数据访问层合并呢？</p><p>首先，数据模型是贫血模型，数据模型中不包含业务逻辑，只作为装载模型属性的容器；</p><p>其次，数据模型与数据库表结构的字段是一一对应的，数据模型最主要的应用场景就是持久层用来进行 ORM，给 Service 层返回封装好的数据模型，供 Service 获取模型属性以执行业务；</p><p>最后，数据模型的 Class 或者属性字段上，通常带有 ORM 框架的一些注解，跟持久层联系非常紧密，可以认为数据模型就是持久层拿来查询或者持久化数据的，数据模型脱离了持久化层，意义不大。</p><h3 id="_2-4-2-第二步、service层抽取业务逻辑" tabindex="-1">2.4.2 第二步、Service层抽取业务逻辑 <a class="header-anchor" href="#_2-4-2-第二步、service层抽取业务逻辑" aria-hidden="true">#</a></h3><p>下面是一个常见的 Service 方法的伪代码，既有缓存、数据库的调用，也有实际的业务逻辑，整体过于臃肿，要进行单元测试更是无从下手。</p><div class="language-java"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki material-palenight"><code><span class="line"></span>
<span class="line"><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">class</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Service</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">@</span><span style="color:#C792EA;">Transactional</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">void</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">bizLogic</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">Param</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">param</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#82AAFF;">checkParam</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">param</span><span style="color:#89DDFF;">);</span><span style="color:#676E95;font-style:italic;">//校验不通过则抛出自定义的运行时异常</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#C792EA;">Data</span><span style="color:#A6ACCD;"> data </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">Data</span><span style="color:#89DDFF;">();</span><span style="color:#676E95;font-style:italic;">//或者是mapper.queryOne(param);</span></span>
<span class="line"><span style="color:#A6ACCD;">        data</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">setId</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">param</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">getId</span><span style="color:#89DDFF;">());</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">condition1 </span><span style="color:#89DDFF;">==</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">true)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">            biz1 </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">biz1</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">param</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">getProperty1</span><span style="color:#89DDFF;">());</span></span>
<span class="line"><span style="color:#A6ACCD;">            data</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">setProperty1</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">biz1</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">else</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">            biz1 </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">biz11</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">param</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">getProperty1</span><span style="color:#89DDFF;">());</span></span>
<span class="line"><span style="color:#A6ACCD;">            data</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">setProperty1</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">biz1</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">condition2 </span><span style="color:#89DDFF;">==</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">true)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">            biz2 </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">biz2</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">param</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">getProperty2</span><span style="color:#89DDFF;">());</span></span>
<span class="line"><span style="color:#A6ACCD;">            data</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">setProperty2</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">biz2</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">else</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">            biz2 </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">biz22</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">param</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">getProperty2</span><span style="color:#89DDFF;">());</span></span>
<span class="line"><span style="color:#A6ACCD;">            data</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">setProperty2</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">biz2</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">        </span><span style="color:#676E95;font-style:italic;">//省略一堆set方法</span></span>
<span class="line"><span style="color:#A6ACCD;">        mapper</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">updateXXXById</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">data</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><p>这是典型的事务脚本的代码：先做参数校验，然后通过 biz1、biz2 等子方法做业务，并将其结果通过一堆 Set 方法设置到数据模型中，再将数据模型更新到数据库。</p><p>由于所有的业务逻辑都在 Service 方法中，造成 Service 方法非常臃肿，Service 需要了解所有的业务规则，并且要清楚如何将基础设施串起来。同样的一条规则，例如 if(condition1=true)，很有可能在每个方法里面都出现。</p><p>我们知道，专业的事情就该让专业的人干。既然业务逻辑是跟具体的业务场景相关的，我们想办法把业务逻辑提取出来，形成一个模型，让这个模型的对象去执行具体的业务逻辑。这样Service 方法就不用再关心里面的 if/else 业务规则，只需要给业务模型执行的舞台，并提供基础设施完成用例即可。</p><p>将业务逻辑抽形成模型，这样的模型就是领域模型的雏形。</p><p>我们先不管领域模型怎么得到，总之，拿到 Service 方法的入参之后，我们通过某种途径得到一个模型，我们让这个模型去做业务逻辑，最后执行的结果也都在模型里，我们再将模型回写数据库，当然，怎么写数据库的我们也先不管。</p><p>抽取之后，将得到如下的伪代码：</p><div class="language-java"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki material-palenight"><code><span class="line"></span>
<span class="line"><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">class</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Service</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">void</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">bizLogic</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">Param</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">param</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">        </span><span style="color:#676E95;font-style:italic;">//如果校验不通过，则抛一个运行时异常</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#82AAFF;">checkParam</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">param</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#89DDFF;">        </span><span style="color:#676E95;font-style:italic;">//加载模型</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#C792EA;">Domain</span><span style="color:#A6ACCD;"> domain </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">loadDomain</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">param</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#89DDFF;">        </span><span style="color:#676E95;font-style:italic;">//调用外部服务取值</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#C792EA;">SomeValue</span><span style="color:#A6ACCD;"> someValue </span><span style="color:#89DDFF;">=</span></span>
<span class="line"><span style="color:#A6ACCD;">                </span><span style="color:#89DDFF;">this.</span><span style="color:#82AAFF;">getSomeValueFromOtherService</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">param</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">getProperty2</span><span style="color:#89DDFF;">());</span></span>
<span class="line"><span style="color:#89DDFF;">        </span><span style="color:#676E95;font-style:italic;">//模型自己去做业务逻辑，Service不关心模型内部的业务规则</span></span>
<span class="line"><span style="color:#A6ACCD;">        domain</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">doBusinessLogic</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">param</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">getProperty1</span><span style="color:#89DDFF;">(),</span><span style="color:#A6ACCD;"> someValue</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#89DDFF;">        </span><span style="color:#676E95;font-style:italic;">//保存模型</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#82AAFF;">saveDomain</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">domain</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><p>根据代码，我们已经将业务逻辑抽取出来了，领域相关的业务规则封闭在领域模型内部。此时 Service 方法非常直观，就是获取模型、执行业务逻辑、保存模型，再协调基础设施完成其余的操作。</p><p>抽取完领域模型后，我们工程的结构如下图：</p><h3 id="_2-4-3-第三步、维护领域对象生命周期" tabindex="-1">2.4.3 第三步、维护领域对象生命周期 <a class="header-anchor" href="#_2-4-3-第三步、维护领域对象生命周期" aria-hidden="true">#</a></h3><p>在第二步中，loadDomain、saveDomain 两个方法还没有得到讨论，这两个方法跟领域对象的生命周期息息相关。</p><p>关于领域对象的生命周期的详细知识，我们将在“领域对象的生命周期”这个章节中详细讲解。</p><p>不管是 loadDomain 还是 saveDomain，我们一般都要依赖于数据库或者其他中间件，所以这两个方法对应的逻辑，肯定是要跟 DAO 产生联系的。</p><p>保存或者加载领域模型，我们可以抽象成一种组件，通过这种组件进行封装数据库操作，这种组件就是 Repository，在Repository中调用DAO完成模型加载和持久化操作。</p><p>注意，Repository 是对加载或者保存领域模型（这里指的是聚合根，因为只有聚合根才会有 Repository）的抽象，可以对上层屏蔽领域模型持久化的细节，因此其方法的入参或者出参，一定是基本数据类型或者领域内定义的类型，不能是数据库表对应的数据模型。</p><p>以下是 Repository 的伪代码：</p><div class="language-java"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">interface</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">DomainRepository</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">void</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">save</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">AggregateRoot</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">root</span><span style="color:#89DDFF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">AggregateRoot</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">load</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">EntityId</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">id</span><span style="color:#89DDFF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><p>既然 DomainRepository 与底层数据库有关联，但是我们现在 DAO 层并没有引入 Domain 这个包，DAO 层自然无法提供 DomainRepository 的实现，我们初步考虑可以将这个 DomainRepository 实现在 Service 中。</p><p>我们再推敲推敲，如果我们在 Service 中实现DomainRepository，势必需要在 Service 中操作数据模型：查询出来数据模型再封装为领域模型、或者将领域模型转为数据模型再通过 ORM 保存，这个过程不该是 Service 层关心的。</p><p>所以，我们决定在 DAO 层直接引入 Domain 包，并在 DAO 层提供 DomainRepository 接口的实现，DAO 层的 Mapper 查询出数据模型之后，封装成领域模型供 DomainRepository 返回。</p><p>这样调整之后， DAO 层不再向 Service 返回数据模型，而是返回领域模型，这就隐藏了数据库交互的细节，我们也把DAO层换个名字称之为Repository。</p><p>现在，我们项目的架构图是这样的了：</p><p>//TODO 上传架构图</p><p>由于数据模型属于贫血模型，自身没有业务逻辑，并且只有Repository这个包会用到，因此我们将之合并到Repository中，接下来不再单独列举。</p><h3 id="_2-4-4-第四步、泛化抽象" tabindex="-1">2.4.4 第四步、泛化抽象 <a class="header-anchor" href="#_2-4-4-第四步、泛化抽象" aria-hidden="true">#</a></h3><p>在第三步中，我们的架构图已经跟经典四层架构非常相似了，我们再对某些层进行泛化抽象。</p><ul><li>Infrastructure Repository 仓储层其实属于基础设施层，只不过其职责是持久化和加载聚合，所以，我们将 Repository 层改名为 infrastructure-persistence，可以理解为基础设施层持久化包。</li><li></li></ul><p>之所以采取这种 infrastructure-XXX 的格式进行命名，是由于 Infrastructure 可能会有很多的包，分别提供不同的基础设施支持。</p><p>例如：一般的项目，还有可能需要引入缓存，我们就可以再加一个包，名字叫 infrastructure-cache。</p><p>对于外部的调用，DDD中有防腐层的概念，将外部模型通过防腐层进行隔离，避免污染本地上下文的领域模型。我们使用入口（Gateway）来封装对外部系统或资源的访问（详细见《企业应用架构模式》，18.1 入口（Gateway）），因此将对外调用这一层称之为infrastructure-gateway。</p><p>注意：Infrastructure 层的门面接口都应先在Domain 层定义，其方法的入参、出参，都应该是领域模型（实体、值对象）或者基本类型。</p><ul><li>User Interface Controller 层其实就是用户接口层，即 User Interface 层，我们在项目简称 ui。当然了可能很多开发者会觉得叫UI好像很别扭，认为 UI 就是 UI 设计师设计的图形界面。</li><li></li></ul><p>Controller 层的名字有很多，有的叫 Rest，有的叫 Resource，考虑到我们这一层不只是有 Rest 接口，还可能还有一系列 Web 相关的拦截器，所以我一般比较称之为 Web。</p><p>因此，我们将其改名为 ui-web，即用户接口层的 Web 包。</p><p>同样，我们可能会有很多的用户接口，但是他们通过不同的协议对外提供服务，因而被划分到不同的包中。我们如果有对外提供的 RPC 服务，那么其服务实现类所在的包就可以命名为 ui-provider。</p><p>有时候引入某个中间件既会增加 Infrastructure 也会增加 User Interface。</p><p>例如，如果引入 Kafka 就需要考虑一下，如果是给 Service 层提供调用的，例如逻辑执行完发送消息通知下游，那么我们再加一个包 infrastructure-publisher；如果是消费 Kafka 的消息，然后调用 Service 层执行业务逻辑的，那么就可以命名为 ui-subscriber。</p><ul><li>Application</li></ul><p>至此，Service 层目前已经没有业务逻辑了，业务逻辑都在 Domain 层去执行了，Service 只是提供了应用服务，协调领域模型、基础设施层完成业务逻辑。</p><p>所以，我们把 Service 层改名为 Application Service 层。</p><p>经过第四步的抽象，其架构图为：</p><p>//TODO 补充架构图</p><h3 id="_2-4-5-第五步、完整的包结构" tabindex="-1">2.4.5 第五步、完整的包结构 <a class="header-anchor" href="#_2-4-5-第五步、完整的包结构" aria-hidden="true">#</a></h3><p>将第四步中出现的包进行整理，并加入启动包，我们就得到了完整的 maven 包结构。</p><p>此时还需要考虑一个问题，我们的启动类应该放在哪里？由于有很多的 User Interface，所以启动类放在任意一个User Interface中都不合适，并且放置再Application Service中也不合适，因此，启动类应该存放在单独的模块中。又因为 application 这个名字被应用层占用了，所以将启动类所在的模块命名为 launcher，一个项目可以存在多个launcher，按需引用User Interface。</p><p>包结构如图所示：</p><p>//TODO 补充架构图</p><p>至此，DDD 项目的整体结构基本讲完了。</p><h2 id="_2-5-领域对象的生命周期" tabindex="-1">2.5 领域对象的生命周期 <a class="header-anchor" href="#_2-5-领域对象的生命周期" aria-hidden="true">#</a></h2><h3 id="_2-5-1-领域对象的生命周期" tabindex="-1">2.5.1 领域对象的生命周期 <a class="header-anchor" href="#_2-5-1-领域对象的生命周期" aria-hidden="true">#</a></h3><p>《领域驱动设计》一书的第六章讲解了领域对象的生命周期，如下图：</p><p>这个状态图是理解领域对象生命周期以及领域对象与各个组件交互的关键。</p><p>领域对象的生命周期包括创建、重建、归档和删除等过程，接下来我们分别进行探讨。</p><h3 id="_2-5-2-领域对象的创建过程" tabindex="-1">2.5.2 领域对象的创建过程 <a class="header-anchor" href="#_2-5-2-领域对象的创建过程" aria-hidden="true">#</a></h3><p>创建的过程是领域对象生命周期的首个阶段。在这个阶段，我们需要实例化领域对象，并设置其初始状态、属性和关联关系。</p><p>领域对象的创建可以在应用程序启动时进行，也可以根据业务需求在运行时动态创建。在创建领域对象时，我们通常需要提供一些必要的参数或初始化数据，用于设置其初始状态。</p><p>创建的过程由 Factory 来支持，其伪代码如下。</p><div class="language-java"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki material-palenight"><code><span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">/**</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> * 通过Factory创建领域对象</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> */</span></span>
<span class="line"><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">interface</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">ArticleDomainFactory</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">ArticleEntity</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">newInstance</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">ArticleTitle</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">articleTitle</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">                              </span><span style="color:#C792EA;">ArticleContent</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">articleContent</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">/**</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> * ArticleDomainFactory的实现类</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> */</span></span>
<span class="line"><span style="color:#89DDFF;">@</span><span style="color:#C792EA;">Component</span></span>
<span class="line"><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">class</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">ArticleDomainFactoryImpl</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">implements</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">ArticleDomainFactory</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">    /**</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">     * IdService是一个Id生成服务</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">     */</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">@</span><span style="color:#C792EA;">Resource</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">IdService</span><span style="color:#A6ACCD;"> idService</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">ArticleEntity</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">newInstance</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">ArticleTitle</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">articleTitle</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">                                     </span><span style="color:#C792EA;">ArticleContent</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">articleContent</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#C792EA;">ArticleEntity</span><span style="color:#A6ACCD;"> entity </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">ArticleEntity</span><span style="color:#89DDFF;">();</span></span>
<span class="line"><span style="color:#89DDFF;">        </span><span style="color:#676E95;font-style:italic;">//为新创建的聚合根赋予唯一标识</span></span>
<span class="line"><span style="color:#A6ACCD;">        entity</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">setArticleId</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;font-style:italic;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">ArticleId</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">idService</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">nextSeq</span><span style="color:#89DDFF;">()));</span></span>
<span class="line"><span style="color:#A6ACCD;">        entity</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">setArticleTitle</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">articleTitle</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">        entity</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">setArticleContent</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">articleContent</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#89DDFF;">        </span><span style="color:#676E95;font-style:italic;">//TODO 其余逻辑</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#A6ACCD;"> entity</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><p>在Application层调用Factory进行领域对象创建，如以下伪代码。</p><div class="language-java"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki material-palenight"><code><span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">/**</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> * ArticleEntity的唯一标识，是一个值对象</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> */</span></span>
<span class="line"><span style="color:#89DDFF;">@</span><span style="color:#C792EA;">Getter</span></span>
<span class="line"><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">class</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">ArticleId</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">private</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">final</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">String</span><span style="color:#A6ACCD;"> value</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">ArticleId</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">String</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">input</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">this.</span><span style="color:#A6ACCD;">value </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> input</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">@</span><span style="color:#C792EA;">Service</span></span>
<span class="line"><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">class</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">AppilcationService</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">@</span><span style="color:#C792EA;">Resource</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">private</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">Factory</span><span style="color:#A6ACCD;"> factory</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">void</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">createArticle</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">Command</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">cmd</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">        </span><span style="color:#676E95;font-style:italic;">//创建ArticleTitle值对象</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#C792EA;">ArticleTitle</span><span style="color:#A6ACCD;"> title </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">ArticleTitle</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">cmd</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">getTitle</span><span style="color:#89DDFF;">());</span></span>
<span class="line"><span style="color:#89DDFF;">        </span><span style="color:#676E95;font-style:italic;">//创建ArticleContent值对象</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#C792EA;">ArticleContent</span><span style="color:#A6ACCD;"> content </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">ArticleContent</span><span style="color:#89DDFF;">(</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">                cmd</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">getContent</span><span style="color:#89DDFF;">());</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">//通过Factory创建ArticleEntity</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#C792EA;">ArticleEntity</span><span style="color:#A6ACCD;"> root </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> factory</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">newInstance</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">title</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> content</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">//TODO 省略后续操作</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"></span></code></pre></div><h3 id="_2-5-3-领域对象的重建过程" tabindex="-1">2.5.3 领域对象的重建过程 <a class="header-anchor" href="#_2-5-3-领域对象的重建过程" aria-hidden="true">#</a></h3><p>重建是领域对象生命周期中的一个重要过程，用于恢复、更新或刷新领域对象的状态。这包括以下几种情况：</p><ul><li>数据持久化和恢复</li></ul><p>当领域对象需要从持久化存储（如数据库、文件系统等）中加载时，需要进行重建。在这种情况下，我们需要将存储中的数据转换为对象，并设置领域对象的状态，以便在后续的业务操作中有效地使用这些对象，此时我们通过Repository的load方法对领域对象进行加载。</p><ul><li>重启或恢复</li></ul><p>在业务执行的过程中，例如更新数据库时发生了乐观锁冲突，导致捕获到异常，此时需要重新加载领域对象，获得领域对象的最新状态，以便正确执行业务逻辑。</p><p>此时捕获到异常后，重新通过Repository的load方法进行领域对象重建。</p><ul><li>事件驱动</li></ul><p>在事件驱动架构中，领域对象通常通过订阅事件来获取数据更新或状态变化的通知。当有相关事件发生时，我们需要对领域对象进行重建，以响应捕获到的领域事件。</p><p>在事件溯源的模式中，还需要通过对历史事件的回放，以达到领域对象重建的目的。</p><p>创建的过程由 Factory 来支持，领域对象重建的过程则是通过 Repository 来支持。</p><p>重建领域对象的伪代码如下：</p><div class="language-java"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki material-palenight"><code><span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">/**</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> * 重建，通过Repository</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> */</span></span>
<span class="line"><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">interface</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">ArticleDomainRepository</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">    /**</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">     * 根据唯一标识加载领域模型</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">     */</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">ArticleEntity</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">load</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">ArticleId</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">articleId</span><span style="color:#89DDFF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">//省略其他方法</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">@</span><span style="color:#C792EA;">Component</span></span>
<span class="line"><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">class</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">ArticleDomainRepositoryImpl</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">implements</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">ArticleDomainRepository</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">@</span><span style="color:#C792EA;">Resource</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">ArticleDao</span><span style="color:#A6ACCD;"> articleDao</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">ArticleEntity</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">load</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">ArticleId</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">articleId</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#C792EA;">Article</span><span style="color:#A6ACCD;"> data </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> articleDao</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">getByArticleId</span><span style="color:#89DDFF;">(</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">                articleId</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">getValue</span><span style="color:#89DDFF;">());</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#C792EA;">ArticleEntity</span><span style="color:#A6ACCD;"> entity </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">ArticleEntity</span><span style="color:#89DDFF;">();</span></span>
<span class="line"><span style="color:#A6ACCD;">        entity</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">setArticleId</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">articleId</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">//创建ArticleTitle值对象</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#C792EA;">ArticleTitle</span><span style="color:#A6ACCD;"> title </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">ArticleTitle</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">data</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">getTitle</span><span style="color:#89DDFF;">());</span></span>
<span class="line"><span style="color:#A6ACCD;">        entity</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">setArticleTitle</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">title</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">//创建ArticleContent值对象</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#C792EA;">ArticleContent</span><span style="color:#A6ACCD;"> content </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">ArticleContent</span><span style="color:#89DDFF;">(</span></span>
<span class="line"><span style="color:#A6ACCD;">                data</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">getContent</span><span style="color:#89DDFF;">());</span></span>
<span class="line"><span style="color:#A6ACCD;">        entity</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">setArticleContent</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">content</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">//TODO 省略其他重建ArticleEntity的逻辑</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#A6ACCD;"> entity</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"></span></code></pre></div><p>在Application Service层，重建领域对象的伪代码如下：</p><div class="language-java"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki material-palenight"><code><span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">@</span><span style="color:#C792EA;">Service</span></span>
<span class="line"><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">class</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">ApplicationService</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">@</span><span style="color:#C792EA;">Resource</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">private</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">Repository</span><span style="color:#A6ACCD;"> repository</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">void</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">modifyArticleTitle</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">Command</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">cmd</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">        </span><span style="color:#676E95;font-style:italic;">//重建领域模型</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#C792EA;">ArticleEntity</span><span style="color:#A6ACCD;"> entity </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> repository</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">load</span></span>
<span class="line"><span style="color:#A6ACCD;">                </span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;font-style:italic;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">ArticleId</span><span style="color:#89DDFF;">(</span></span>
<span class="line"><span style="color:#A6ACCD;">                        cmd</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">getArticleId</span><span style="color:#89DDFF;">()));</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">        </span><span style="color:#676E95;font-style:italic;">//创建ArticleTitle值对象</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#C792EA;">ArticleTitle</span><span style="color:#A6ACCD;"> title </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">ArticleTitle</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">cmd</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">getTitle</span><span style="color:#89DDFF;">());</span></span>
<span class="line"><span style="color:#89DDFF;">        </span><span style="color:#676E95;font-style:italic;">//修改ArticleEntity的标题</span></span>
<span class="line"><span style="color:#A6ACCD;">        entity</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">modifyTitle</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">title</span><span style="color:#89DDFF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">        </span><span style="color:#676E95;font-style:italic;">//TODO 省略后续操作</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"></span></code></pre></div><p>值得注意的是，要避免在 Application 层直接将 DTO 转成聚合来执行业务操作，这种做法实际上架空了 Factory 和 Repository，造成领域模型生命周期的不完整，直接转换得到的领域对象有可能状态并不完整。 错误的示例伪代码如下。</p><div class="language-java"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki material-palenight"><code><span class="line"></span>
<span class="line"><span style="color:#89DDFF;">@</span><span style="color:#C792EA;">Service</span></span>
<span class="line"><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">class</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">ApplicationService</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">void</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">newDraft</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">ArticleCreateCmd</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">cmd</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">//错误！！！直接将Command转成领域模型</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#C792EA;">ArticleEntity</span><span style="color:#A6ACCD;"> articleEntity </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> converter</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">convert</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">cmd</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">//省略后续业务逻辑</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><h3 id="_2-5-4-领域对象的归档过程" tabindex="-1">2.5.4 领域对象的归档过程 <a class="header-anchor" href="#_2-5-4-领域对象的归档过程" aria-hidden="true">#</a></h3><p>归档是指将领域对象从活动状态转移到非活动状态的过程。</p><p>对于已经不再使用的领域对象，我们可以将其永久地存储在归档系统中。这些对以进行后续的分析、审计或法律需求等。</p><p>领域对象也就是业务数据，我们一般会对业务数据进行定期的数据结转，将一定时间以前（例如三年前）的数据从生产库迁移到历史库或者大数据平台，之后将已结转的数据从生产库中删除。</p><h2 id="_2-6-应用架构各层间的对象类型转换" tabindex="-1">2.6 应用架构各层间的对象类型转换 <a class="header-anchor" href="#_2-6-应用架构各层间的对象类型转换" aria-hidden="true">#</a></h2><h3 id="_2-6-1-应用架构各层的数据类型" tabindex="-1">2.6.1 应用架构各层的数据类型 <a class="header-anchor" href="#_2-6-1-应用架构各层的数据类型" aria-hidden="true">#</a></h3><p>我们的应用架构的包含四层，分别是用户接口层（User Interface）、应用层（Application Layer）、领域层（Domain Layer）和基础设施层（Infrastructure Layer），其中应用架构中每一层都会有不同的对象类型。在完成一次完整地业务过程中，需要不同层次的对象类型进行协作，过程中会涉及到对象类型的转换。</p><ul><li>领域层</li></ul><p>领域层是系统的核心，包含了业务领域对象和业务规则。在领域层中，数据以领域模型的形式存在，对象类型包括实体（Entity）、值对象（Value Object）、聚合（Aggregate）和领域事件（Domain Event）。</p><p>我们一般不会直接对外部暴露领域模型的对象。</p><ul><li>基础设施层</li></ul><p>在基础设施层，数据以数据模型的形式存在。</p><p>数据模型通常是对数据库的table逆向生成的贫血模型，其字段与table的column一一对应，如下图。</p><p>领域模型通过Repository进行持久化和加载，而Repository实现在Infrastructure Persistence包中。</p><p>Repository通过save方法保存领域模型，save方法内部会将领域模型转成Persistence模块的数据模型对象，数据模型对象的字段与数据库的表一一对应；Repository通过load方法加载领域模型，需要先从数据库查询出数据模型，再将数据模型转成领域模型。</p><p>详细可以参考Repository相关章节。</p><ul><li>应用服务层</li></ul><p>应用服务层的对象类型主要是Command、Query、View这三种。</p><p>Command：命令，代表应用服务层收到的操作命令，执行这些操作将会引起聚合根内部状态的改变，并且往往会触发领域事件。Command类型的对象用于应用服务层方法的入参。</p><p>Query：查询，代表应用服务曾收到的查询请求，执行查询操作不会引起聚合根内部状态的改变。Query类型的对象也用于应用服务曾方法的入参。</p><p>View：视图对象，代表应用服务响应Query请求的结果。View对象可以对外隐藏领域模型地实现细节，往往用于应用服务方法的返回。</p><p>这几种数据类型的使用场景如下。</p><div class="language-java"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">interface</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">ApplicationService</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">    /**</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">     * Command类型用于应用服务方法入参，代表将改变聚合根状态</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">     */</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">void</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">modifyTitle</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">ModifyTitleCommand</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">cmd</span><span style="color:#89DDFF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">    /**</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">     * Query类型用于应用服务方法入参，代表查询条件</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">     * View对象应用应用服务Query方法返回，代表查询结果</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">     */</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">ArticleView</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">getArticle</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">AeticleQuery</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">query</span><span style="color:#89DDFF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><ul><li>用户接口层</li></ul><p>用户接口层主要是将暴露应用服务通过各种协议暴露给外部进行调用，因此用户接口层的逻辑应该尽可能地少。用户接口层主要的对象类型是DTO（Data Transfer Object），即数据传输的对象，它的主要作用是在不同的服务直接进行数据传输。 对于HTTP接口，由于一般向调用方返回JSON格式的数据，因此可以直接使用应用服务层返回应用服务层的Command、Query、View，不需要额外定义DTO对象。</p><p>对于RPC接口，服务提供者往往会在单独的jar包中定义接口，这些接口的入参和出参都是DTO。服务提供者的用户接口层实现这些接口时，需要将DTO转成我们自己的Query、View对象。</p><p>RPC接口的伪代码如下。</p><div class="language-java"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki material-palenight"><code><span class="line"></span>
<span class="line"><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">interface</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">ArticleApi</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">void</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">createNewDraft</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">ArticleCreateRequest</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">req</span><span style="color:#89DDFF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">ArticleDTO</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">queryArticle</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">ArticleQueryRequest</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">req</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"></span></code></pre></div><p>涉及到的几个DTO对象的定义如下。</p><div class="language-java"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki material-palenight"><code><span class="line"></span>
<span class="line"><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">class</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">ArticleCreateRequest</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">implements</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Serializable</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">private</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">String</span><span style="color:#A6ACCD;"> title</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">private</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">String</span><span style="color:#A6ACCD;"> content</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">//getter 和setter</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">class</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">ArticleQueryRequest</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">implements</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Serializable</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">private</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">String</span><span style="color:#A6ACCD;"> title</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">//getter 和setter</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">class</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">ArticleDTO</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">implements</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Serializable</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">private</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">String</span><span style="color:#A6ACCD;"> title</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">private</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">String</span><span style="color:#A6ACCD;"> content</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">//getter 和setter</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"></span></code></pre></div><p>接下来我们将分别对查询、创建、修改这几个过程进行类型转换的梳理。</p><h3 id="_2-6-2-查询过程的类型转换" tabindex="-1">2.6.2 查询过程的类型转换 <a class="header-anchor" href="#_2-6-2-查询过程的类型转换" aria-hidden="true">#</a></h3><p>查询过程的类型转换如下图。</p><ul><li>用户接口层</li></ul><p>对于HTTP接口，由于一般向调用方返回JSON格式的数据，因此此时可以直接使用应用服务层返回应用服务层的Command、Query、View。</p><p>伪代码如下。</p><div class="language-java"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki material-palenight"><code><span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">@</span><span style="color:#C792EA;">RestController</span></span>
<span class="line"><span style="color:#89DDFF;">@</span><span style="color:#C792EA;">RequestMapping</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">/article</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">class</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">ArticleController</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">    /**</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">     * 直接使用Query对象作为入参</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">     */</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">@</span><span style="color:#C792EA;">RequestMapping</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">/getArticle</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">ArticleView</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">getArticle</span><span style="color:#89DDFF;">(@</span><span style="color:#C792EA;">RequestBody</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">AeticleQuery</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">query</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#C792EA;">ArticleView</span><span style="color:#A6ACCD;"> view </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> applicationService</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">getArticle</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">query</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#89DDFF;">        </span><span style="color:#676E95;font-style:italic;">//直接返回View对象</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#A6ACCD;"> view</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><p>对于RPC接口，我们实现上面的ArticleApi，伪代码如下。</p><div class="language-java"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki material-palenight"><code><span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">/**</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> *RPC接口实现类</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> */</span></span>
<span class="line"><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">class</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">ArticleProvider</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">implements</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">ArticleApi</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">@</span><span style="color:#C792EA;">Resource</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">private</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">ApplicationService</span><span style="color:#A6ACCD;"> applicationService</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">ArticleDTO</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">queryArticle</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">ArticleQueryRequest</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">req</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">        </span><span style="color:#676E95;font-style:italic;">//把接口定义中的ArticleQueryRequest翻译成Query对象</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#C792EA;">ArticleQuery</span><span style="color:#A6ACCD;"> query </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> converter</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">convert</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">req</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#89DDFF;">        </span><span style="color:#676E95;font-style:italic;">//调用应用服务进行查询，返回View对象</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#C792EA;">ArticleView</span><span style="color:#A6ACCD;"> view </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> applicationService</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">getArticle</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">query</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#89DDFF;">        </span><span style="color:#676E95;font-style:italic;">//将View对象转成DTO并返回</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#C792EA;">ArticleDTO</span><span style="color:#A6ACCD;"> dto </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> converter</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">convert</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">view</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#A6ACCD;"> dto</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">//TODO 省略其他方法</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"></span></code></pre></div><p>converter的convert方法主要是Java Bean之间的属性映射，我们可以使用mapstruct，既简单也高效。</p><ul><li>应用服务层</li></ul><p>应用层会将接受到的Query对象换成领域模型中的值对象，之后通过Repository加载聚合根，并将聚合根转成View对象进行返回。</p><p>转成View对象的原因是，我们需要隐藏领域模型的实现细节，避免未来领域模型调整时，影响到下游的调用方。</p><p>伪代码如下。</p><div class="language-java"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki material-palenight"><code><span class="line"></span>
<span class="line"><span style="color:#89DDFF;">@</span><span style="color:#C792EA;">Service</span></span>
<span class="line"><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">class</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">ApplicationServiceImpl</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">implements</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">ApplicationService</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">@</span><span style="color:#C792EA;">Resource</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">private</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">Repository</span><span style="color:#A6ACCD;"> repository</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">    /**</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">     * Query类型用于应用服务方法入参，代表查询条件</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">     * View对象应用应用服务Query方法返回，代表查询结果</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">     */</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">ArticleView</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">getArticle</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">AeticleQuery</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">query</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">        </span><span style="color:#676E95;font-style:italic;">//Query对象换成领域模型中的值对象（即ArticleId）</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#C792EA;">ArticleId</span><span style="color:#A6ACCD;"> articleId </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">ArticleId</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">query</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">getArticleId</span><span style="color:#89DDFF;">());</span></span>
<span class="line"><span style="color:#89DDFF;">        </span><span style="color:#676E95;font-style:italic;">//加载领域模型</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#C792EA;">ArticleEntity</span><span style="color:#A6ACCD;"> entity </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> repository</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">load</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">articleId</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#89DDFF;">        </span><span style="color:#676E95;font-style:italic;">//将领域模型转成View对象</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#C792EA;">ArticleView</span><span style="color:#A6ACCD;"> view </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> converter</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">convert</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">entity</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#A6ACCD;"> view</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><ul><li>基础设施层</li></ul><p>基础设施层会先查询出数据模型，然后将数据模型组装为领域模型。伪代码如下。</p><div class="language-java"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki material-palenight"><code><span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">/**</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> * Repository加载聚合根的过程</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> */</span></span>
<span class="line"><span style="color:#89DDFF;">@</span><span style="color:#C792EA;">Component</span></span>
<span class="line"><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">class</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">ArticleDomainRepositoryImpl</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">implements</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">ArticleDomainRepository</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">@</span><span style="color:#C792EA;">Resource</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">private</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">ArticleDao</span><span style="color:#A6ACCD;"> dao</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">    /**</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">     * 根据唯一标识加载领域模型</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">     */</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">ArticleEntity</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">load</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">ArticleId</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">articleId</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">        </span><span style="color:#676E95;font-style:italic;">//查询数据模型</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#C792EA;">Article</span><span style="color:#A6ACCD;"> data </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> dao</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">selectOneByArticleId</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">articleId</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">getValue</span><span style="color:#89DDFF;">());</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#C792EA;">ArticleEntity</span><span style="color:#A6ACCD;"> entity </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">ArticleEntity</span><span style="color:#89DDFF;">();</span></span>
<span class="line"><span style="color:#A6ACCD;">        entity</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">setArticleId</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">article</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">        entity</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">setTitle</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;font-style:italic;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">ArticleTitle</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">data</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">getTitle</span><span style="color:#89DDFF;">()));</span></span>
<span class="line"><span style="color:#A6ACCD;">        entity</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">setArticleContent</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;font-style:italic;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">ArticleContent</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">data</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">getContent</span><span style="color:#89DDFF;">()));</span></span>
<span class="line"><span style="color:#89DDFF;">        </span><span style="color:#676E95;font-style:italic;">//省略其他逻辑</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#A6ACCD;"> entity</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><h3 id="_2-6-3-创建过程的类型转换" tabindex="-1">2.6.3 创建过程的类型转换 <a class="header-anchor" href="#_2-6-3-创建过程的类型转换" aria-hidden="true">#</a></h3><p>整体的过程如下图。</p><ul><li>User Interface</li></ul><p>如果 User Interface 方法的入参复用了 Application 的Command，直接透传给 Application 层即可；如果 User Interface 有自己的入参类型，例如 RPC 接口会在 API 包中定义一些类型，这时候需要将其换成 Application 的Command。</p><p>对于 HTTP 接口，示例如下：</p><div class="language-java"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki material-palenight"><code><span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">/**</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> * 创建过程的用户接口层，HTTP接口</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> */</span></span>
<span class="line"><span style="color:#89DDFF;">@</span><span style="color:#C792EA;">RestController</span></span>
<span class="line"><span style="color:#89DDFF;">@</span><span style="color:#C792EA;">RequestMapping</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">/article</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">class</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">ArticleController</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">@</span><span style="color:#C792EA;">RequestMapping</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">/createNewDraft</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">void</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">createNewDraft</span><span style="color:#89DDFF;">(@</span><span style="color:#C792EA;">RequestBody</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">CreateDraftCmd</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">cmd</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">        </span><span style="color:#676E95;font-style:italic;">//直接透传给应用服务层</span></span>
<span class="line"><span style="color:#A6ACCD;">        applicationService</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">newDraft</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">cmd</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><p>对于 RPC 接口，示例如下：</p><div class="language-java"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki material-palenight"><code><span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">/**</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> * 创建过程的用户接口层，RPC接口</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> */</span></span>
<span class="line"><span style="color:#89DDFF;">@</span><span style="color:#C792EA;">Component</span></span>
<span class="line"><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">class</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">ArticleProvider</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">implements</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">ArticleApi</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">void</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">createNewDraft</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">CreateDraftRequest</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">req</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">        </span><span style="color:#676E95;font-style:italic;">//把CreateDraftRequest换成Command</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#C792EA;">CreateDraftCmd</span><span style="color:#A6ACCD;"> cmd </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> converter</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">convert</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">req</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">        applicationService</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">newDraft</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">cmd</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><ul><li>Application</li></ul><p>Application 层内将 Command 转化成领域内的值对象，传递给领域工厂以创建领域模型。 例如 Command 中定义的 content 字段是 String 类型，而领域内定义了一个 ArticleContent 的领域类型，此时需要将 String 类型换成 ArticleContent 类型。</p><p>示例代码如下：</p><div class="language-java"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">/**</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> * Application层的命令对象</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> */</span></span>
<span class="line"><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">class</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">CreateDraftCmd</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">private</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">String</span><span style="color:#A6ACCD;"> title</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">private</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">String</span><span style="color:#A6ACCD;"> content</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><p>应用服务层方法如下：</p><div class="language-java"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki material-palenight"><code><span class="line"></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">/**</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> * Application层的创建草稿方法</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> */</span></span>
<span class="line"><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">class</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">ArticleApplicationService</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">@</span><span style="color:#C792EA;">Resource</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">private</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">ArticleEntityFactory</span><span style="color:#A6ACCD;"> factory</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">@</span><span style="color:#C792EA;">Resource</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">private</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">ArticleEntityRepository</span><span style="color:#A6ACCD;"> repository</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">    /**</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">     * 创建草稿</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">     */</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">void</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">newDraft</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">CreateDraftCmd</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">cmd</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">        </span><span style="color:#676E95;font-style:italic;">//将 Command 转化成领域内的值对象，传递给领域工厂以创建领域模型</span></span>
<span class="line"><span style="color:#89DDFF;">        </span><span style="color:#676E95;font-style:italic;">//此处需要将String类型的title、content分别转成值对象</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#C792EA;">ArticleTitle</span><span style="color:#A6ACCD;"> title </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">ArticleTitle</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">cmd</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">getTitle</span><span style="color:#89DDFF;">());</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#C792EA;">ArticleContent</span><span style="color:#A6ACCD;"> content </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">ArticleContent</span><span style="color:#89DDFF;">(</span></span>
<span class="line"><span style="color:#A6ACCD;">                cmd</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">getContent</span><span style="color:#89DDFF;">());</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#C792EA;">ArticleEntity</span><span style="color:#A6ACCD;"> articleEntity </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> factory</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">newInstance</span><span style="color:#89DDFF;">(</span></span>
<span class="line"><span style="color:#A6ACCD;">                title</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> content</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#89DDFF;">        </span><span style="color:#676E95;font-style:italic;">//执行创建草稿的业务逻辑</span></span>
<span class="line"><span style="color:#A6ACCD;">        articleEntity</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">createNewDraft</span><span style="color:#89DDFF;">();</span></span>
<span class="line"><span style="color:#89DDFF;">        </span><span style="color:#676E95;font-style:italic;">//保存聚合根</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">        repository</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">save</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">articleEntity</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><ul><li>Domain</li></ul><p>领域模型内部执行创建草稿的逻辑。</p><p>创建草稿看起来很像一个对象的初始化逻辑，但是不要把创建草稿的逻辑放在对象的构造方法中，因为创建草稿是业务操作，对象初始化是技术实现。</p><p>每个对象都会调用构造方法初始化，但是不可能每次构造一个对象都创建一遍草稿。有的 article 是已经发布了的，如果创建草稿的初始化放到构造方法中，那么已经发布的 article 对象也会再创建一遍草稿，并且可能再次产生一个新的事件，这是不合理的。</p><div class="language-java"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki material-palenight"><code><span class="line"></span>
<span class="line"><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">class</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">ArticleEntity</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">void</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">createNewDraft</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">        Objects</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">requireNonNull</span><span style="color:#89DDFF;">(this.</span><span style="color:#A6ACCD;">title</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">        Objects</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">requireNonNull</span><span style="color:#89DDFF;">(this.</span><span style="color:#A6ACCD;">content</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">this.</span><span style="color:#A6ACCD;">state </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> ArticleState</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">NewDraft</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><ul><li>Infrastructure</li></ul><p>Infrastructure Persistence 包内部有用于对象关系映射的数据模型，将领域模型转成数据模型并进行持久化。</p><p>值得注意，领域模型和数据模型通常不是 1 对 1 的，有的领域模型内的值对象，很可能在数据模型中会有单独的对象。例如，Article 在数据库层面可能由多张表完成存储，例如主表 cms_article、正文表 cms_article_content，也在 Repository 内完成转换并持久化。</p><p>有一些 ORM 框架（例如 JPA），可以通过技术手段，在实体上加入一系列注解，就可以将实体内的字段映射到数据库表。</p><p>存在即合理，这种方式用得合理可能会带来一些便利，但是我个人不会采用这种方法，因为这样使得领域模型承载了过多的职责：领域模型应该只关心业务逻辑的实现，而不必关心领域模型应该如何持久化，这是基础设施层该关心的事情。</p><p>Infrastructure Persistence 包伪代码如下。</p><div class="language-java"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">/**</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> * Repository保存聚合根的过程</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> */</span></span>
<span class="line"><span style="color:#89DDFF;">@</span><span style="color:#C792EA;">Component</span></span>
<span class="line"><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">class</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">ArticleDomainRepositoryImpl</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">implements</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">ArticleDomainRepository</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">@</span><span style="color:#C792EA;">Resource</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">private</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">ArticleDao</span><span style="color:#A6ACCD;"> dao</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">    /**</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">     * 保存聚合根</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">     */</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">@</span><span style="color:#C792EA;">Transactional</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">ArticleEntity</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">save</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">ArticleEntity</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">entity</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">        </span><span style="color:#676E95;font-style:italic;">//初始化数据模型对象</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#C792EA;">Article</span><span style="color:#A6ACCD;"> data </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">Article</span><span style="color:#89DDFF;">();</span></span>
<span class="line"><span style="color:#89DDFF;">        </span><span style="color:#676E95;font-style:italic;">//赋值</span></span>
<span class="line"><span style="color:#A6ACCD;">        data</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">setArticleId</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">entity</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">getArticleId</span><span style="color:#89DDFF;">().</span><span style="color:#82AAFF;">getValue</span><span style="color:#89DDFF;">());</span></span>
<span class="line"><span style="color:#A6ACCD;">        data</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">setArticleTitle</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">entity</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">getArticleTitle</span><span style="color:#89DDFF;">().</span><span style="color:#82AAFF;">getValue</span><span style="color:#89DDFF;">());</span></span>
<span class="line"><span style="color:#A6ACCD;">        data</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">setArticleContent</span><span style="color:#89DDFF;">(</span></span>
<span class="line"><span style="color:#A6ACCD;">                entity</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">getArticleContent</span><span style="color:#89DDFF;">().</span><span style="color:#82AAFF;">getValue</span><span style="color:#89DDFF;">());</span></span>
<span class="line"><span style="color:#89DDFF;">        </span><span style="color:#676E95;font-style:italic;">//插入数据模型记录</span></span>
<span class="line"><span style="color:#A6ACCD;">        dao</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">insert</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">data</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"></span></code></pre></div><h3 id="_2-6-4-修改过程的类型转换" tabindex="-1">2.6.4 修改过程的类型转换 <a class="header-anchor" href="#_2-6-4-修改过程的类型转换" aria-hidden="true">#</a></h3><p>修改的整体过程如下图。</p><p>修改过程与创建过程的区别，仅在于创建是通过 Factory 生成聚合根，而修改是通过 Repository 加载聚合根。</p><div class="language-java"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">/**</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> * Application层的Command</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> */</span></span>
<span class="line"><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">class</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">ModifyTitleCmd</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">private</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">String</span><span style="color:#A6ACCD;"> articleId</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">private</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">String</span><span style="color:#A6ACCD;"> title</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">@</span><span style="color:#C792EA;">Service</span></span>
<span class="line"><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">class</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">ArticleApplicationService</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">@</span><span style="color:#C792EA;">Resource</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">private</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">ArticleEntityRepository</span><span style="color:#A6ACCD;"> repository</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">void</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">modifyTitle</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">ModifyTitleCmd</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">cmd</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">        </span><span style="color:#676E95;font-style:italic;">//以Command中的参数创建值对象</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#C792EA;">ArticleId</span><span style="color:#A6ACCD;"> articleId </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">ArticleId</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">cmd</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">getArticleId</span><span style="color:#89DDFF;">());</span></span>
<span class="line"><span style="color:#89DDFF;">        </span><span style="color:#676E95;font-style:italic;">//由Repository加载聚合根</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#C792EA;">ArticleEntity</span><span style="color:#A6ACCD;"> articleEntity </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> repository</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">load</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">articleId</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#89DDFF;">        </span><span style="color:#676E95;font-style:italic;">//聚合根执行业务操作</span></span>
<span class="line"><span style="color:#A6ACCD;">        articleEntity</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">modifyTitle</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;font-style:italic;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">ArticleTitle</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">cmd</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">getTitle</span><span style="color:#89DDFF;">()));</span></span>
<span class="line"><span style="color:#89DDFF;">        </span><span style="color:#676E95;font-style:italic;">//保存聚合根</span></span>
<span class="line"><span style="color:#A6ACCD;">        repository</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">save</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">articleEntity</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><hr><hr><h1>欢迎加入本书知识星球以获得作者答疑</h1><div><img src="https://s1.ax1x.com/2023/04/15/p9p2mKP.jpg"></div>`,231),e=[o];function t(c,r,y,i,A,D){return n(),a("div",null,e)}const d=s(p,[["render",t]]);export{F as __pageData,d as default};
