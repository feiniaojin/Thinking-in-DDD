import{_ as a,c as r,o as n,a as s}from"./app.ac4c3fb8.js";const D=JSON.parse('{"title":"Infrastructure 层的实现细节","description":"","frontmatter":{},"headers":[{"level":2,"title":"1. 不擅自引入新的领域知识","slug":"_1-不擅自引入新的领域知识","link":"#_1-不擅自引入新的领域知识","children":[]},{"level":2,"title":"2. 封装 Infrastructure 层内部知识","slug":"_2-封装-infrastructure-层内部知识","link":"#_2-封装-infrastructure-层内部知识","children":[]},{"level":2,"title":"3. Infrastructure 层返回值先在 Domain 层定义","slug":"_3-infrastructure-层返回值先在-domain-层定义","link":"#_3-infrastructure-层返回值先在-domain-层定义","children":[]}],"relativePath":"2/InfrastructureLayer.md"}'),t={name:"2/InfrastructureLayer.md"},e=s(`<h1 id="infrastructure-层的实现细节" tabindex="-1">Infrastructure 层的实现细节 <a class="header-anchor" href="#infrastructure-层的实现细节" aria-hidden="true">#</a></h1><p>Infrastructure 层为 Domain 层定义的领域支撑组件提供实现，在 Application 层的协调下提供基础设施支持。</p><h2 id="_1-不擅自引入新的领域知识" tabindex="-1">1. 不擅自引入新的领域知识 <a class="header-anchor" href="#_1-不擅自引入新的领域知识" aria-hidden="true">#</a></h2><p>Domain 层定义了很多支撑领域模型完成业务操作组件，Infrastructure 层对这些已经定义好的组件提供实现。</p><p>如果某个组件未在 Domain 层定义，Infrastructure 层就不应该暴露给 Application 层使用。</p><h2 id="_2-封装-infrastructure-层内部知识" tabindex="-1">2. 封装 Infrastructure 层内部知识 <a class="header-anchor" href="#_2-封装-infrastructure-层内部知识" aria-hidden="true">#</a></h2><p>Infrastructure 层通过实现 Domain 层定义的组件为 Application 层提供服务，并且 Application 层只能使用 Domain 包中定义的组件。Infrastructure 在实现这些组件时，不应该要求 Application 层掌握 Infrastructure 层的内部知识。</p><p>举个例子，对于我们常用的 ORM 框架 MyBatis，我们有时候需要实现一个 Interceptor，例如一个用于打印 SQL 的 Interceptor，那么这个打印 SQL 的 Interceptor 就应该在 infrastructure-persistence 这个包内，不应该放置在 Application 层或者 User Interface 层。</p><p>Infrastructure 层中间件的配置信息，也应该放置在这一层，并提供修改配置值的途径。</p><p>举一些例子：</p><p>infrastructure-persistence 对应的数据库配置、分库分表配置应该本层；</p><p>Infrastructure-Cache 如果用到了 Redis，那么 Redis 客户端的Java配置文件也应该放在本层；</p><p>Infrastructure-Consumer 包需要配置调用远程服务的 token，因此提供一个RpcConfig用于装载配置项。</p><p>RpcConfig 这个配置文件留在本包内，但是预留了 infrastructure.rpc.token 这个配置项，可以在启动包的 application.properties 文件中更改：</p><div class="language-java"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">class</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">RpcConfig</span><span style="color:#89DDFF;">{</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">@</span><span style="color:#C792EA;">Value</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">\${infrastructure.rpc.token}</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#C792EA;">private</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">String</span><span style="color:#A6ACCD;"> token</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;font-style:italic;">//省略其他代码……</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><h2 id="_3-infrastructure-层返回值先在-domain-层定义" tabindex="-1">3. Infrastructure 层返回值先在 Domain 层定义 <a class="header-anchor" href="#_3-infrastructure-层返回值先在-domain-层定义" aria-hidden="true">#</a></h2><p>Infrastructure 层的返回值是 Domain 层执行业务逻辑所必须的，Infrastructure 层的返回值应先在 Domain 层定义。</p><p>Infrastructure 层不允许返回 Infrastructure 层执行的过程对象，更不应该返回外部系统定义的类型，应当封装好再返回，这样 Infrastructure 层可以充当防腐层（ACL）的角色。</p><p>举个例子：</p><p>如果我们系统需要用户的地址查询地理位置信息，我们不能直接使用外部地理位置信息接口定义的类型，而是应该先在 Domain 层定义一个我们自己的地理位置信息类，然后将接口返回的属性拷贝到我们自己的地理位置信息类中。</p><p>假设我们用了外部接口的类型，下次外部系统重构升级调整了包结构或者其他类型信息，很容易就造成己方系统改动过大，每个引用该类型的地方的都需要改动。</p><p>如果我们自己定义了一个地理位置信息类型，我们只需要改动调用该接口的适配器，即可完成升级替换。</p>`,22),p=[e];function c(o,l,i,u,f,d){return n(),r("div",null,p)}const h=a(t,[["render",c]]);export{D as __pageData,h as default};
