import{_ as s,c as a,o as n,a as l}from"./app.bfa68492.js";const C=JSON.parse('{"title":"Domain 层的实现细节","description":"","frontmatter":{},"headers":[{"level":2,"title":"1. 领域相关组件先定义后使用","slug":"_1-领域相关组件先定义后使用","link":"#_1-领域相关组件先定义后使用","children":[]},{"level":2,"title":"2. 领域知识内部闭环","slug":"_2-领域知识内部闭环","link":"#_2-领域知识内部闭环","children":[]},{"level":2,"title":"3. 按照限界上下文分包","slug":"_3-按照限界上下文分包","link":"#_3-按照限界上下文分包","children":[]},{"level":2,"title":"4. 实体、值对象内部不引用基础设施组件","slug":"_4-实体、值对象内部不引用基础设施组件","link":"#_4-实体、值对象内部不引用基础设施组件","children":[]}],"relativePath":"2/DomainLayer.md"}'),p={name:"2/DomainLayer.md"},o=l(`<h1 id="domain-层的实现细节" tabindex="-1">Domain 层的实现细节 <a class="header-anchor" href="#domain-层的实现细节" aria-hidden="true">#</a></h1><p>Domain 层实现的关键是要确保领域知识的完备，主要需要注意几点：</p><h2 id="_1-领域相关组件先定义后使用" tabindex="-1">1. 领域相关组件先定义后使用 <a class="header-anchor" href="#_1-领域相关组件先定义后使用" aria-hidden="true">#</a></h2><p>领域模型相关的组件，例如 Factory、Repository，都应该先在 Domain 包进行定义，然后在 Application 层或者 Infrastructure 层实现，而不是没有定义就直接提供给上层。</p><p>通过阅读 Domain 的代码，就应该能了解领域相关的所有组件。</p><h2 id="_2-领域知识内部闭环" tabindex="-1">2. 领域知识内部闭环 <a class="header-anchor" href="#_2-领域知识内部闭环" aria-hidden="true">#</a></h2><p>领域模型相关的组件，其方法的入参、出参，必须是领域对象（实体、值对象）或者基本类型。一定要避免引入 ORM 用的数据模型（Data Object）和数据传输对象(DTO)，因为这两种都不是领域对象。</p><h2 id="_3-按照限界上下文分包" tabindex="-1">3. 按照限界上下文分包 <a class="header-anchor" href="#_3-按照限界上下文分包" aria-hidden="true">#</a></h2><p>Domain 层根据限界上下文分包，把所有的领域知识放到限界上下文对应的包下即是最佳实践，没必要再根据对象的用途做分包。</p><p>如果可以预料某种子类会很多（例如 Command、Query），可以建立子包，但是应避免一个类创建一个包。</p><p>以下是一种分包方式，可以看到很多包只有一个类，这样分包虽然看起来很清晰，但是其实跟不分包是一样的。</p><p>不是说把包分得很细就不好，分包主要是为了归类或者封装，一个类一个包并没有达到这两个目的。</p><p>以下是我个人的分包方式：</p><p>可以看到，除了可能存在很多的值对象单独分包了，其他都是一股脑放在 aaa 这个上下文的包根路径下。</p><p>可以感受一下 java.util 包：</p><p><img src="https://p3-sign.toutiaoimg.com/tos-cn-i-qvj2lq49k0/0d278f053f3f4178be89924c9ff9cf3d~noop.image?_iz=58558&amp;from=article.pc_detail&amp;x-expires=1675792835&amp;x-signature=8mxiBNb3Wc5R3KKYMYoiSWHsnpo%3D" alt="">JDK 中 java.util 包</p><h2 id="_4-实体、值对象内部不引用基础设施组件" tabindex="-1">4. 实体、值对象内部不引用基础设施组件 <a class="header-anchor" href="#_4-实体、值对象内部不引用基础设施组件" aria-hidden="true">#</a></h2><p>领域驱动设计采用充血模型，大部分的业务逻辑由领域对象承接。</p><p>领域对象执行业务逻辑所需要的必要参数，应当在方法的入参传入，而不是在领域对象内部产生。</p><p>领域对象不应该在自己内部手工调用基础设施以获取执行参数或者持久化自己，这样会导致领域模型的方法职责不再单一，这样做其实又变成了贫血模型。</p><p>应当在Application层中调用基础设施或者持久化。</p><p>以下是反例：</p><div class="language-java"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki material-palenight"><code><span class="line"></span>
<span class="line"><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">class</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Entity</span><span style="color:#89DDFF;">{</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">EntityId</span><span style="color:#A6ACCD;"> entityId</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">InfrastructureRpc</span><span style="color:#A6ACCD;"> rpc</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">Repository</span><span style="color:#A6ACCD;"> repository</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">//值对象，领域基本类型，DP</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">SomeValue</span><span style="color:#A6ACCD;"> someValue</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">//省略其他属性……</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">void</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">bizOperate</span><span style="color:#89DDFF;">(){</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">        </span><span style="color:#676E95;font-style:italic;">//执行业务操作时，内部调了基础设施rpc取某个值</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">this.</span><span style="color:#A6ACCD;">someValue</span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;">rpc</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">getSomeValue</span><span style="color:#89DDFF;">(this.</span><span style="color:#A6ACCD;">entityId</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">getString</span><span style="color:#89DDFF;">());</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">        </span><span style="color:#676E95;font-style:italic;">//TODO 此处是业务逻辑代码，省略</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">        </span><span style="color:#676E95;font-style:italic;">//持久化自己</span></span>
<span class="line"><span style="color:#A6ACCD;">        repository</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">save</span><span style="color:#89DDFF;">(this);</span></span>
<span class="line"><span style="color:#89DDFF;">        </span><span style="color:#676E95;font-style:italic;">//TODO 后续其他操作，略</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"></span></code></pre></div><p>以下是推荐实践：</p><div class="language-java"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">class</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Entity</span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">EntityId</span><span style="color:#A6ACCD;"> entityId</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">//执行业务操作时需要的数据，在Application层准备好，再从方法传入</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">void</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">bizOperate</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">SomeValue</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">someValue</span><span style="color:#89DDFF;">){</span></span>
<span class="line"><span style="color:#89DDFF;">        </span><span style="color:#676E95;font-style:italic;">//使用入参做一系列操作，不会在领域模型调用基础设施层</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">class</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">ApplicationService</span><span style="color:#89DDFF;">{</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#C792EA;">Repository</span><span style="color:#A6ACCD;"> repository</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#C792EA;">InfrastructureRpc</span><span style="color:#A6ACCD;"> rpc</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">void</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">bizOperate</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">BizCommand</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">command</span><span style="color:#89DDFF;">){</span></span>
<span class="line"><span style="color:#89DDFF;">        </span><span style="color:#676E95;font-style:italic;">//加载实体</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#C792EA;">Entity</span><span style="color:#A6ACCD;"> entity </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;">  repository</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">load</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;font-style:italic;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">EntityId</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">command</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">getEntityIdValue</span><span style="color:#89DDFF;">()));</span></span>
<span class="line"><span style="color:#89DDFF;">        </span><span style="color:#676E95;font-style:italic;">//准备实体执行业务所需的SomeValue</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#C792EA;">SomeValue</span><span style="color:#A6ACCD;"> someValue</span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;">rpc</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">getSomeValue</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">entity</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">getEntityId</span><span style="color:#89DDFF;">());</span></span>
<span class="line"><span style="color:#89DDFF;">        </span><span style="color:#676E95;font-style:italic;">//将SomeValue传递给实体执行操作</span></span>
<span class="line"><span style="color:#A6ACCD;">        entity</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">bizOperate</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">someValue</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">        repository</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">save</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">entity</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#89DDFF;">        </span><span style="color:#676E95;font-style:italic;">//省略后续操作</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div>`,25),e=[o];function t(c,r,i,y,D,A){return n(),a("div",null,e)}const d=s(p,[["render",t]]);export{C as __pageData,d as default};
